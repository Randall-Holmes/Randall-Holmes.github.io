
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  7/24/2019
>>  12:30 pm Boise time



postulate universe:type

>> universe: type {move 0}



postulate U1:in universe

>> U1: in universe {move 0}



declare uu in universe

>> uu: in universe {move 1}



postulate nextu uu:in universe

>> nextu: [(uu_1:in universe) => (---:in universe)]
>>   {move 0}



postulate domu uu:type

>> domu: [(uu_1:in universe) => (---:type)]
>>   {move 0}



declare vv in domu uu

>> vv: in domu(uu) {move 1}



postulate domv vv:type

>> domv: [(.uu_1:in universe),(vv_1:in domu(.uu_1))
>>      => (---:type)]
>>   {move 0}



postulate domt uu vv:type

>> domt: [(uu_1:in universe),(vv_1:in domu(uu_1))
>>      => (---:type)]
>>   {move 0}



define U2:nextu U1

>> U2: [(nextu(U1):in universe)]
>>   {move 0}



define U3:nextu U2

>> U3: [(nextu(U2):in universe)]
>>   {move 0}


comment nesting of universes will be a pain


declare t type

>> t: type {move 1}



declare u type

>> u: type {move 1}



postulate -> t u:type

>> ->: [(t_1:type),(u_1:type) => (---:type)]
>>   {move 0}



open

   declare x in t

>>    x: in t {move 2}



   postulate y x:in u

>>    y: [(x_1:in t) => (---:in u)]
>>      {move 1}



   close

postulate lambda t u y:in t -> u

>> lambda: [(t_1:type),(u_1:type),(y_1:[(x_2:
>>         in t_1) => (---:in u_1)])
>>      => (---:in (t_1 -> u_1))]
>>   {move 0}



>> Inspector Lestrade says:  Done reading scratch to hott:
>>  type lines or type quit to exit interface

quit


