
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  7/24/2019
>>  12:30 pm Boise time


comment  The treatment of logic in my style manual


declare p prop

>> p: prop {move 1}



declare q prop

>> q: prop {move 1}


comment   conjunction/and


postulate & p q:prop

>> &: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



declare pp that p

>> pp: that p {move 1}



declare qq that q

>> qq: that q {move 1}



postulate Andproof p q pp qq:that p & q

>> Andproof: [(p_1:prop),(q_1:prop),(pp_1:that
>>      p_1),(qq_1:that q_1) => (---:that (p_1
>>      & q_1))]
>>   {move 0}



declare rr that p & q

>> rr: that (p & q) {move 1}



postulate Andelim1 p q rr:that p

>> Andelim1: [(p_1:prop),(q_1:prop),(rr_1:that
>>      (p_1 & q_1)) => (---:that p_1)]
>>   {move 0}



postulate Andelim2 p q rr: that q

>> Andelim2: [(p_1:prop),(q_1:prop),(rr_1:that
>>      (p_1 & q_1)) => (---:that q_1)]
>>   {move 0}


comment implication/if...then...


postulate -> p q:prop

>> ->: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   postulate Ded pp2:that q

>>    Ded: [(pp2_1:that p) => (---:that q)]
>>      {move 1}



   close

postulate Ifproof p q Ded:that p -> q

>> Ifproof: [(p_1:prop),(q_1:prop),(Ded_1:[(pp2_2:
>>         that p_1) => (---:that q_1)])
>>      => (---:that (p_1 -> q_1))]
>>   {move 0}



declare ss that p -> q

>> ss: that (p -> q) {move 1}



postulate Mp p q pp ss:that q

>> Mp: [(p_1:prop),(q_1:prop),(pp_1:that p_1),
>>      (ss_1:that (p_1 -> q_1)) => (---:that
>>      q_1)]
>>   {move 0}


comment negation (not defining it this time)


postulate ~ p:prop

>> ~: [(p_1:prop) => (---:prop)]
>>   {move 0}



postulate ??:prop

>> ??: prop {move 0}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   postulate contra pp2:that ??

>>    contra: [(pp2_1:that p) => (---:that ??)]
>>      {move 1}



   close

postulate Negproof p contra:that ~p

>> Negproof: [(p_1:prop),(contra_1:[(pp2_2:that
>>         p_1) => (---:that ??)])
>>      => (---:that ~(p_1))]
>>   {move 0}



declare tt that ~p

>> tt: that ~(p) {move 1}



postulate Contradiction p pp tt:that ??

>> Contradiction: [(p_1:prop),(pp_1:that p_1),
>>      (tt_1:that ~(p_1)) => (---:that ??)]
>>   {move 0}



declare absurd that ??

>> absurd: that ?? {move 1}



postulate Panic p absurd:that p

>> Panic: [(p_1:prop),(absurd_1:that ??) =>
>>      (---:that p_1)]
>>   {move 0}



declare maybe that ~ ~p

>> maybe: that ~(~(p)) {move 1}



postulate Dneg p maybe:that p

>> Dneg: [(p_1:prop),(maybe_1:that ~(~(p_1)))
>>      => (---:that p_1)]
>>   {move 0}


comment basic rules for disjunction


postulate v p q:prop

>> v: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



postulate Addition1 p q pp:that p v q

>> Addition1: [(p_1:prop),(q_1:prop),(pp_1:that
>>      p_1) => (---:that (p_1 v q_1))]
>>   {move 0}



postulate Addition2 p q qq:that p v q

>> Addition2: [(p_1:prop),(q_1:prop),(qq_1:that
>>      q_1) => (---:that (p_1 v q_1))]
>>   {move 0}


comment prepare for proof by cases


declare uu that p v q

>> uu: that (p v q) {move 1}



declare r prop

>> r: prop {move 1}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   postulate case1 pp2:that r

>>    case1: [(pp2_1:that p) => (---:that r)]
>>      {move 1}



   close

open

   declare qq2 that q

>>    qq2: that q {move 2}



   postulate case2 qq2:that r

>>    case2: [(qq2_1:that q) => (---:that r)]
>>      {move 1}



   close

postulate Cases p,q,uu,r,case1,case2:that \
   r

>> Cases: [(p_1:prop),(q_1:prop),(uu_1:that
>>      (p_1 v q_1)),(r_1:prop),(case1_1:[(pp2_2:
>>         that p_1) => (---:that r_1)]),
>>      (case2_1:[(qq2_3:that q_1) => (---:that
>>         r_1)])
>>      => (---:that r_1)]
>>   {move 0}


comment derived rules for implication


open

   declare notq that ~q

>>    notq: that ~(q) {move 2}



   postulate Ded2 notq:that ~p

>>    Ded2: [(notq_1:that ~(q)) => (---:that
>>         ~(p))]
>>      {move 1}



   declare pp2 that p

>>    pp2: that p {move 2}



   open

      declare notq2 that ~q

>>       notq2: that ~(q) {move 3}



      define hah notq2:Contradiction p pp2, \
         Ded2 notq2

>>       hah: [(notq2_1:that ~(q)) => (---:that
>>            ??)]
>>         {move 2}



      close

   define hah2 pp2:Negproof ~q hah

>>    hah2: [(pp2_1:that p) => (---:that ~(~(q)))]
>>      {move 1}



   define hah3 pp2:Dneg q hah2 pp2

>>    hah3: [(pp2_1:that p) => (---:that q)]
>>      {move 1}



   close

define Indirect p q Ded2:Ifproof p q hah3


>> Indirect: [(p_1:prop),(q_1:prop),(Ded2_1:
>>      [(notq_2:that ~(q_1)) => (---:that ~(p_1))])
>>      => (Ifproof(p_1,q_1,[(pp2_3:that p_1)
>>         => ((q_1 Dneg (~(q_1) Negproof [(notq2_4:
>>            that ~(q_1)) => (Contradiction(p_1,
>>            pp2_3,Ded2_1(notq2_4)):that ??)]))
>>         :that q_1)])
>>      :that (p_1 -> q_1))]
>>   {move 0}



declare vv that ~q

>> vv: that ~(q) {move 1}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   define hmmm pp2:Mp p q pp2 ss

>>    hmmm: [(pp2_1:that p) => (---:that q)]
>>      {move 1}



   define hmmm2 pp2:Contradiction q hmmm \
      pp2 vv

>>    hmmm2: [(pp2_1:that p) => (---:that ??)]
>>      {move 1}



   close

define Mt p q ss vv:Negproof p hmmm2

>> Mt: [(p_1:prop),(q_1:prop),(ss_1:that (p_1
>>      -> q_1)),(vv_1:that ~(q_1)) => ((p_1 Negproof
>>      [(pp2_2:that p_1) => (Contradiction(q_1,
>>         Mp(p_1,q_1,pp2_2,ss_1),vv_1):that ??)])
>>      :that ~(p_1))]
>>   {move 0}


comment derived rules for disjunction


open

   declare notq that ~q

>>    notq: that ~(q) {move 2}



   postulate ruleout notq:that p

>>    ruleout: [(notq_1:that ~(q)) => (---:that
>>         p)]
>>      {move 1}



   declare neither that ~(p v q)

>>    neither: that ~((p v q)) {move 2}



   open

      declare notq2 that ~q

>>       notq2: that ~(q) {move 3}



      define problem notq2:Addition1 p q \
         ruleout notq2

>>       problem: [(notq2_1:that ~(q)) => (---:
>>            that (p v q))]
>>         {move 2}



      define problem2 notq2: Contradiction \
         p v q, problem notq2, neither

>>       problem2: [(notq2_1:that ~(q)) => (---:
>>            that ??)]
>>         {move 2}



      close

   define problem3 neither:Negproof ~q, problem2


>>    problem3: [(neither_1:that ~((p v q)))
>>         => (---:that ~(~(q)))]
>>      {move 1}



   define problem4 neither:Dneg q problem3 \
      neither

>>    problem4: [(neither_1:that ~((p v q)))
>>         => (---:that q)]
>>      {move 1}



   define problem5 neither: Addition2 p q \
      problem4 neither

>>    problem5: [(neither_1:that ~((p v q)))
>>         => (---:that (p v q))]
>>      {move 1}



   define disaster neither:Contradiction \
      p v q, problem5 neither, neither

>>    disaster: [(neither_1:that ~((p v q)))
>>         => (---:that ??)]
>>      {move 1}



   close

define Orproof p q ruleout:Dneg p v q, Negproof \
   ~(p v q), disaster

>> Orproof: [(p_1:prop),(q_1:prop),(ruleout_1:
>>      [(notq_2:that ~(q_1)) => (---:that p_1)])
>>      => (((p_1 v q_1) Dneg (~((p_1 v q_1))
>>      Negproof [(neither_3:that ~((p_1 v q_1)))
>>         => (Contradiction((p_1 v q_1),Addition2(p_1,
>>         q_1,(q_1 Dneg (~(q_1) Negproof [(notq2_4:
>>            that ~(q_1)) => (Contradiction((p_1
>>            v q_1),Addition1(p_1,q_1,ruleout_1(notq2_4)),
>>            neither_3):that ??)]))
>>         ),neither_3):that ??)]))
>>      :that (p_1 v q_1))]
>>   {move 0}


comment rules of disjunctive syllogism


declare notp that ~p

>> notp: that ~(p) {move 1}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   define qfollows pp2:Panic q, Contradiction \
      p pp2 notp

>>    qfollows: [(pp2_1:that p) => (---:that
>>         q)]
>>      {move 1}



   declare qq2 that q

>>    qq2: that q {move 2}



   define qfollow2 qq2:qq2

>>    qfollow2: [(qq2_1:that q) => (---:that
>>         q)]
>>      {move 1}



   close

define Ds1 p q uu notp:Cases p q uu q, qfollows, \
   qfollow2

>> Ds1: [(p_1:prop),(q_1:prop),(uu_1:that (p_1
>>      v q_1)),(notp_1:that ~(p_1)) => (Cases(p_1,
>>      q_1,uu_1,q_1,[(pp2_2:that p_1) => ((q_1
>>         Panic Contradiction(p_1,pp2_2,notp_1)):
>>         that q_1)]
>>      ,[(qq2_3:that q_1) => (qq2_3:that q_1)])
>>      :that q_1)]
>>   {move 0}



declare notq that ~q

>> notq: that ~(q) {move 1}



open

   declare pp2 that p

>>    pp2: that p {move 2}



   define notqcase1 pp2:pp2

>>    notqcase1: [(pp2_1:that p) => (---:that
>>         p)]
>>      {move 1}



   declare qq2 that q

>>    qq2: that q {move 2}



   define notqcase2 qq2: Panic p, Contradiction \
      q qq2 notq

>>    notqcase2: [(qq2_1:that q) => (---:that
>>         p)]
>>      {move 1}



   close

define Ds2 p q uu notq:Cases p q uu p, notqcase1, \
   notqcase2

>> Ds2: [(p_1:prop),(q_1:prop),(uu_1:that (p_1
>>      v q_1)),(notq_1:that ~(q_1)) => (Cases(p_1,
>>      q_1,uu_1,p_1,[(pp2_2:that p_1) => (pp2_2:
>>         that p_1)]
>>      ,[(qq2_3:that q_1) => ((p_1 Panic Contradiction(q_1,
>>         qq2_3,notq_1)):that p_1)])
>>      :that p_1)]
>>   {move 0}


comment delayed Orproof2 needed


open

   declare notp2 that ~p

>>    notp2: that ~(p) {move 2}



   postulate ruleout2 notp2:that q

>>    ruleout2: [(notp2_1:that ~(p)) => (---:
>>         that q)]
>>      {move 1}



   declare neither that ~(p v q)

>>    neither: that ~((p v q)) {move 2}



   open

      declare notp3 that ~p

>>       notp3: that ~(p) {move 3}



      define problem notp3:Addition2 p q, \
         ruleout2 notp3

>>       problem: [(notp3_1:that ~(p)) => (---:
>>            that (p v q))]
>>         {move 2}



      define problem2 notp3:Contradiction \
         p v q,problem notp3, neither

>>       problem2: [(notp3_1:that ~(p)) => (---:
>>            that ??)]
>>         {move 2}



      close

   define problema3 neither:Dneg p, Negproof \
      ~p problem2

>>    problema3: [(neither_1:that ~((p v q)))
>>         => (---:that p)]
>>      {move 1}



   define problema4 neither:Addition1 p q, \
      problema3 neither

>>    problema4: [(neither_1:that ~((p v q)))
>>         => (---:that (p v q))]
>>      {move 1}



   define problema5 neither:Contradiction \
      p v q, problema4 neither, neither

>>    problema5: [(neither_1:that ~((p v q)))
>>         => (---:that ??)]
>>      {move 1}



   close

define Orproof2 p q ruleout2:Dneg p v q, \
   Negproof ~(p v q), problema5

>> Orproof2: [(p_1:prop),(q_1:prop),(ruleout2_1:
>>      [(notp2_2:that ~(p_1)) => (---:that q_1)])
>>      => (((p_1 v q_1) Dneg (~((p_1 v q_1))
>>      Negproof [(neither_3:that ~((p_1 v q_1)))
>>         => (Contradiction((p_1 v q_1),Addition1(p_1,
>>         q_1,(p_1 Dneg (~(p_1) Negproof [(notp3_4:
>>            that ~(p_1)) => (Contradiction((p_1
>>            v q_1),Addition2(p_1,q_1,ruleout2_1(notp3_4)),
>>            neither_3):that ??)]))
>>         ),neither_3):that ??)]))
>>      :that (p_1 v q_1))]
>>   {move 0}



open

   declare notp2 that ~p

>>    notp2: that ~(p) {move 2}



   define samenotp notp2:notp2

>>    samenotp: [(notp2_1:that ~(p)) => (---:
>>         that ~(p))]
>>      {move 1}



   close

define Excmid p:Orproof2 p, ~p, samenotp


>> Excmid: [(p_1:prop) => (Orproof2(p_1,~(p_1),
>>      [(notp2_2:that ~(p_1)) => (notp2_2:that
>>         ~(p_1))])
>>      :that (p_1 v ~(p_1)))]
>>   {move 0}


comment we assume the totality of natural numbers


postulate Nat:type

>> Nat: type {move 0}



declare x in Nat

>> x: in Nat {move 1}



declare y in Nat

>> y: in Nat {move 1}



open

   declare z in Nat

>>    z: in Nat {move 2}



   postulate P z:prop

>>    P: [(z_1:in Nat) => (---:prop)]
>>      {move 1}



   close

postulate = x y:prop

>> =: [(x_1:in Nat),(y_1:in Nat) => (---:prop)]
>>   {move 0}



declare eq that = x y

>> eq: that (x = y) {move 1}



declare px that P x

>> px: that P(x) {move 1}



postulate subs x y P, eq px:that P y

>> subs: [(x_1:in Nat),(y_1:in Nat),(P_1:[(z_2:
>>         in Nat) => (---:prop)]),
>>      (eq_1:that (x_1 = y_1)),(px_1:that P_1(x_1))
>>      => (---:that P_1(y_1))]
>>   {move 0}



open

   open

      declare u in Nat

>>       u: in Nat {move 3}



      postulate P1 u:prop

>>       P1: [(u_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   declare px1 that P1 x

>>    px1: that P1(x) {move 2}



   postulate Eq P1, px1:that P1 y

>>    Eq: [(P1_1:[(u_2:in Nat) => (---:prop)]),
>>         (px1_1:that P1_1(x)) => (---:that P1_1(y))]
>>      {move 1}



   close

postulate Eqproof x y Eq:that = x y

>> Eqproof: [(x_1:in Nat),(y_1:in Nat),(Eq_1:
>>      [(P1_2:[(u_3:in Nat) => (---:prop)]),
>>         (px1_2:that P1_2(x_1)) => (---:that
>>         P1_2(y_1))])
>>      => (---:that (x_1 = y_1))]
>>   {move 0}



open

   open

      declare u in Nat

>>       u: in Nat {move 3}



      postulate P2 u:prop

>>       P2: [(u_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   declare refl1 that P2 x

>>    refl1: that P2(x) {move 2}



   define refl2 P2, refl1:refl1

>>    refl2: [(P2_1:[(u_2:in Nat) => (---:prop)]),
>>         (refl1_1:that P2_1(x)) => (---:that
>>         P2_1(x))]
>>      {move 1}



   close

define Refl x:Eqproof x x refl2

>> Refl: [(x_1:in Nat) => (Eqproof(x_1,x_1,[(P2_2:
>>         [(u_3:in Nat) => (---:prop)]),
>>         (refl1_2:that P2_2(x_1)) => (refl1_2:
>>         that P2_2(x_1))])
>>      :that (x_1 = x_1))]
>>   {move 0}



open

   declare symm1 that = x y

>>    symm1: that (x = y) {move 2}



   open

      declare u in Nat

>>       u: in Nat {move 3}



      define P3 u:=y u

>>       P3: [(u_1:in Nat) => (---:prop)]
>>         {move 2}



      define P4 u:=u x

>>       P4: [(u_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   define symm2 symm1:subs x y P4, symm1 \
      Refl x

>>    symm2: [(symm1_1:that (x = y)) => (---:
>>         that (y = x))]
>>      {move 1}



   close

declare symm3 that = x y

>> symm3: that (x = y) {move 1}



define symm x y symm3:symm2 symm3

>> symm: [(x_1:in Nat),(y_1:in Nat),(symm3_1:
>>      that (x_1 = y_1)) => (subs(x_1,y_1,[(u_2:
>>         in Nat) => ((u_2 = x_1):prop)]
>>      ,symm3_1,Refl(x_1)):that (y_1 = x_1))]
>>   {move 0}



declare z in Nat

>> z: in Nat {move 1}



open

   declare trans1 that = x y

>>    trans1: that (x = y) {move 2}



   declare trans2 that = y z

>>    trans2: that (y = z) {move 2}



   open

      declare u in Nat

>>       u: in Nat {move 3}



      define P5 u:= x u

>>       P5: [(u_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   define trans3 trans1 trans2:subs y z P5, \
      trans2 trans1

>>    trans3: [(trans1_1:that (x = y)),(trans2_1:
>>         that (y = z)) => (---:that (x = z))]
>>      {move 1}



   close

declare t1 that =x y

>> t1: that (x = y) {move 1}



declare t2 that =y z

>> t2: that (y = z) {move 1}



define trans x y z t1 t2:trans3 t1 t2

>> trans: [(x_1:in Nat),(y_1:in Nat),(z_1:in
>>      Nat),(t1_1:that (x_1 = y_1)),(t2_1:that
>>      (y_1 = z_1)) => (subs(y_1,z_1,[(u_2:in
>>         Nat) => ((x_1 = u_2):prop)]
>>      ,t2_1,t1_1):that (x_1 = z_1))]
>>   {move 0}



postulate 1: in Nat

>> 1: in Nat {move 0}



postulate succ x:in Nat

>> succ: [(x_1:in Nat) => (---:in Nat)]
>>   {move 0}



postulate notone x: that ~ = succ x 1

>> notone: [(x_1:in Nat) => (---:that ~((succ(x_1)
>>      = 1)))]
>>   {move 0}



declare samesucc1 that = succ x succ y

>> samesucc1: that (succ(x) = succ(y)) {move
>>   1}



postulate samesucc x y samesucc1:that = x \
   y

>> samesucc: [(x_1:in Nat),(y_1:in Nat),(samesucc1_1:
>>      that (succ(x_1) = succ(y_1))) => (---:
>>      that (x_1 = y_1))]
>>   {move 0}



open

   declare u in Nat

>>    u: in Nat {move 2}



   postulate Indp u:prop

>>    Indp: [(u_1:in Nat) => (---:prop)]
>>      {move 1}



   close

declare basis that Indp 1

>> basis: that Indp(1) {move 1}



open

   declare u in Nat

>>    u: in Nat {move 2}



   declare indhyp that Indp u

>>    indhyp: that Indp(u) {move 2}



   postulate indstep u indhyp:that Indp succ \
      u

>>    indstep: [(u_1:in Nat),(indhyp_1:that
>>         Indp(u_1)) => (---:that Indp(succ(u_1)))]
>>      {move 1}



   close

postulate Induction x Indp, basis indstep: \
   that Indp x

>> Induction: [(x_1:in Nat),(Indp_1:[(u_2:in
>>         Nat) => (---:prop)]),
>>      (basis_1:that Indp_1(1)),(indstep_1:[(u_3:
>>         in Nat),(indhyp_3:that Indp_1(u_3))
>>         => (---:that Indp_1(succ(u_3)))])
>>      => (---:that Indp_1(x_1))]
>>   {move 0}


comment try to prove Satz 1


define =/= x y: ~(x=y)

>> =/=: [(x_1:in Nat),(y_1:in Nat) => (~((x_1
>>      = y_1)):prop)]
>>   {move 0}



open

   declare hyp that x =/= y

>>    hyp: that (x =/= y) {move 2}



   open

      declare counterhyp that succ x = succ \
         y

>>       counterhyp: that (succ(x) = succ(y))
>>         {move 3}



      define oops counterhyp:Contradiction \
         x=y, (samesucc x y counterhyp), hyp


>>       oops: [(counterhyp_1:that (succ(x)
>>            = succ(y))) => (---:that ??)]
>>         {move 2}



      close

   define conc hyp: Negproof succ x = succ \
      y, oops

>>    conc: [(hyp_1:that (x =/= y)) => (---:
>>         that ~((succ(x) = succ(y))))]
>>      {move 1}



   close

define satz1 x y:Ifproof x=/=y, succ x =/= \
   succ y,conc

>> satz1: [(x_1:in Nat),(y_1:in Nat) => (Ifproof((x_1
>>      =/= y_1),(succ(x_1) =/= succ(y_1)),[(hyp_2:
>>         that (x_1 =/= y_1)) => (((succ(x_1)
>>         = succ(y_1)) Negproof [(counterhyp_3:
>>            that (succ(x_1) = succ(y_1))) =>
>>            (Contradiction((x_1 = y_1),samesucc(x_1,
>>            y_1,counterhyp_3),hyp_2):that ??)])
>>         :that ~((succ(x_1) = succ(y_1))))])
>>      :that ((x_1 =/= y_1) -> (succ(x_1) =/=
>>      succ(y_1))))]
>>   {move 0}



define theprop x:succ x =/= x

>> theprop: [(x_1:in Nat) => ((succ(x_1) =/=
>>      x_1):prop)]
>>   {move 0}



open

   declare u in Nat

>>    u: in Nat {move 2}



   declare xx that theprop u

>>    xx: that theprop(u) {move 2}



   define yy u:satz1 succ u u

>>    yy: [(u_1:in Nat) => (---:that ((succ(u_1)
>>         =/= u_1) -> (succ(succ(u_1)) =/= succ(u_1))))]
>>      {move 1}



   define zz u xx:Mp succ u =/= u, succ succ \
      u =/= succ u, xx, yy u

>>    zz: [(u_1:in Nat),(xx_1:that theprop(u_1))
>>         => (---:that (succ(succ(u_1)) =/= succ(u_1)))]
>>      {move 1}



   define zz2 u xx:Mp theprop u, theprop \
      succ u, xx, yy u

>>    zz2: [(u_1:in Nat),(xx_1:that theprop(u_1))
>>         => (---:that theprop(succ(u_1)))]
>>      {move 1}



   close

define satz2 x:Induction x, theprop, notone \
   1, zz2

>> satz2: [(x_1:in Nat) => (Induction(x_1,theprop,
>>      notone(1),[(u_2:in Nat),(xx_2:that theprop(u_2))
>>         => (Mp(theprop(u_2),theprop(succ(u_2)),
>>         xx_2,(succ(u_2) satz1 u_2)):that theprop(succ(u_2)))])
>>      :that theprop(x_1))]
>>   {move 0}



define badsatz2 x:Induction x,theprop,notone \
   1,zz

>> badsatz2: [(x_1:in Nat) => (Induction(x_1,
>>      theprop,notone(1),[(u_2:in Nat),(xx_2:
>>         that theprop(u_2)) => (Mp((succ(u_2)
>>         =/= u_2),(succ(succ(u_2)) =/= succ(u_2)),
>>         xx_2,(succ(u_2) satz1 u_2)):that (succ(succ(u_2))
>>         =/= succ(u_2)))])
>>      :that theprop(x_1))]
>>   {move 0}


comment not bad any more after bugs fixed...

comment existence and uniqueness stuff -- definition of "the"; quantifiers


open

   declare n in Nat

>>    n: in Nat {move 2}



   postulate Uprop n:prop

>>    Uprop: [(n_1:in Nat) => (---:prop)]
>>      {move 1}



   close

postulate the Uprop:in Nat

>> the: [(Uprop_1:[(n_2:in Nat) => (---:prop)])
>>      => (---:in Nat)]
>>   {move 0}



open

   declare m in Nat

>>    m: in Nat {move 2}



   declare n in Nat

>>    n: in Nat {move 2}



   declare mm that Uprop m

>>    mm: that Uprop(m) {move 2}



   declare nn that Uprop n

>>    nn: that Uprop(n) {move 2}



   postulate allthesame m n mm nn:that m=n


>>    allthesame: [(m_1:in Nat),(n_1:in Nat),
>>         (mm_1:that Uprop(m_1)),(nn_1:that Uprop(n_1))
>>         => (---:that (m_1 = n_1))]
>>      {move 1}



   close

declare w in Nat

>> w: in Nat {move 1}



declare ww that Uprop w

>> ww: that Uprop(w) {move 1}



postulate Theproof Uprop, allthesame, w ww: \
   that Uprop the Uprop

>> Theproof: [(Uprop_1:[(n_2:in Nat) => (---:
>>         prop)]),
>>      (allthesame_1:[(m_3:in Nat),(n_3:in Nat),
>>         (mm_3:that Uprop_1(m_3)),(nn_3:that
>>         Uprop_1(n_3)) => (---:that (m_3 = n_3))]),
>>      (w_1:in Nat),(ww_1:that Uprop_1(w_1))
>>      => (---:that Uprop_1(the(Uprop_1)))]
>>   {move 0}



open

   declare u in Nat

>>    u: in Nat {move 2}



   define predx u: succ u = x

>>    predx: [(u_1:in Nat) => (---:prop)]
>>      {move 1}



   close

open

   declare u in Nat

>>    u: in Nat {move 2}



   close

postulate thereis P:prop

>> thereis: [(P_1:[(z_2:in Nat) => (---:prop)])
>>      => (---:prop)]
>>   {move 0}



declare xx that P x

>> xx: that P(x) {move 1}



postulate Ei x, P, xx:that thereis P

>> Ei: [(x_1:in Nat),(P_1:[(z_2:in Nat) => (---:
>>         prop)]),
>>      (xx_1:that P_1(x_1)) => (---:that thereis(P_1))]
>>   {move 0}



define theprop3 x:(x=1) v thereis predx

>> theprop3: [(x_1:in Nat) => (((x_1 = 1) v
>>      thereis([(u_2:in Nat) => ((succ(u_2) =
>>         x_1):prop)]))
>>      :prop)]
>>   {move 0}



open

   declare www in Nat

>>    www: in Nat {move 2}



   declare xyz that theprop3 w

>>    xyz: that theprop3(w) {move 2}



   declare xyz2 that theprop3(www)

>>    xyz2: that theprop3(www) {move 2}



   open

      declare v1 in Nat

>>       v1: in Nat {move 3}



      define predsxxx v1:succ v1 = succ www


>>       predsxxx: [(v1_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   define testproof1 www:Ei www,predsxxx, \
      Refl succ www

>>    testproof1: [(www_1:in Nat) => (---:that
>>         thereis([(v1_3:in Nat) => ((succ(v1_3)
>>            = succ(www_1)):prop)]))
>>         ]
>>      {move 1}



   define testproof www xyz2:Addition2 succ \
      www = 1, thereis predsxxx, testproof1 \
      www

>>    testproof: [(www_1:in Nat),(xyz2_1:that
>>         theprop3(www_1)) => (---:that ((succ(www_1)
>>         = 1) v thereis([(v1_3:in Nat) => ((succ(v1_3)
>>            = succ(www_1)):prop)]))
>>         )]
>>      {move 1}



   close

open

   declare u in Nat

>>    u: in Nat {move 2}



   define silly u:succ u = 1

>>    silly: [(u_1:in Nat) => (---:prop)]
>>      {move 1}



   close

define basis3:Addition1 1=1, thereis silly, \
   Refl 1

>> basis3: [(Addition1((1 = 1),thereis([(u_1:
>>         in Nat) => ((succ(u_1) = 1):prop)]),
>>      Refl(1)):that ((1 = 1) v thereis([(u_2:
>>         in Nat) => ((succ(u_2) = 1):prop)]))
>>      )]
>>   {move 0}



define satz3 x:Induction x, theprop3, basis3, \
   testproof

>> satz3: [(x_1:in Nat) => (Induction(x_1,theprop3,
>>      basis3,[(www_2:in Nat),(xyz2_2:that theprop3(www_2))
>>         => (Addition2((succ(www_2) = 1),thereis([(v1_3:
>>            in Nat) => ((succ(v1_3) = succ(www_2)):
>>            prop)]),
>>         Ei(www_2,[(v1_4:in Nat) => ((succ(v1_4)
>>            = succ(www_2)):prop)]
>>         ,Refl(succ(www_2)))):that ((succ(www_2)
>>         = 1) v thereis([(v1_5:in Nat) => ((succ(v1_5)
>>            = succ(www_2)):prop)]))
>>         )])
>>      :that theprop3(x_1))]
>>   {move 0}



define satzb3 x:Induction x, theprop3, Addition1(1=1, \
   thereis silly,Refl 1), testproof

>> satzb3: [(x_1:in Nat) => (Induction(x_1,theprop3,
>>      Addition1((1 = 1),thereis([(u_2:in Nat)
>>         => ((succ(u_2) = 1):prop)]),
>>      Refl(1)),[(www_3:in Nat),(xyz2_3:that
>>         theprop3(www_3)) => (Addition2((succ(www_3)
>>         = 1),thereis([(v1_4:in Nat) => ((succ(v1_4)
>>            = succ(www_3)):prop)]),
>>         Ei(www_3,[(v1_5:in Nat) => ((succ(v1_5)
>>            = succ(www_3)):prop)]
>>         ,Refl(succ(www_3)))):that ((succ(www_3)
>>         = 1) v thereis([(v1_6:in Nat) => ((succ(v1_6)
>>            = succ(www_3)):prop)]))
>>         )])
>>      :that theprop3(x_1))]
>>   {move 0}



define satzc3 x: Induction x, theprop3, Addition1 \
   1=1, thereis silly, Refl 1, testproof

>> satzc3: [(x_1:in Nat) => (Induction(x_1,theprop3,
>>      Addition1((1 = 1),thereis([(u_2:in Nat)
>>         => ((succ(u_2) = 1):prop)]),
>>      Refl(1)),[(www_3:in Nat),(xyz2_3:that
>>         theprop3(www_3)) => (Addition2((succ(www_3)
>>         = 1),thereis([(v1_4:in Nat) => ((succ(v1_4)
>>            = succ(www_3)):prop)]),
>>         Ei(www_3,[(v1_5:in Nat) => ((succ(v1_5)
>>            = succ(www_3)):prop)]
>>         ,Refl(succ(www_3)))):that ((succ(www_3)
>>         = 1) v thereis([(v1_6:in Nat) => ((succ(v1_6)
>>            = succ(www_3)):prop)]))
>>         )])
>>      :that theprop3(x_1))]
>>   {move 0}


comment the previous is another parser test


open

   declare u2 in Nat

>>    u2: in Nat {move 2}



   postulate Aprop u2:prop

>>    Aprop: [(u2_1:in Nat) => (---:prop)]
>>      {move 1}



   close

postulate forall Aprop:prop

>> forall: [(Aprop_1:[(u2_2:in Nat) => (---:
>>         prop)])
>>      => (---:prop)]
>>   {move 0}



declare aproof that forall P

>> aproof: that forall(P) {move 1}



postulate Ui x P,aproof:that P x

>> Ui: [(x_1:in Nat),(P_1:[(z_2:in Nat) => (---:
>>         prop)]),
>>      (aproof_1:that forall(P_1)) => (---:that
>>      P_1(x_1))]
>>   {move 0}



open

   declare u2 in Nat

>>    u2: in Nat {move 2}



   postulate gen u2: that P u2

>>    gen: [(u2_1:in Nat) => (---:that P(u2_1))]
>>      {move 1}



   close

postulate Ug P,gen:that forall P

>> Ug: [(P_1:[(z_2:in Nat) => (---:prop)]),
>>      (gen_1:[(u2_3:in Nat) => (---:that P_1(u2_3))])
>>      => (---:that forall(P_1))]
>>   {move 0}


clearcurrent


declare x in Nat

>> x: in Nat {move 1}



open

   declare u2 in Nat

>>    u2: in Nat {move 2}



   postulate addx u2: in Nat

>>    addx: [(u2_1:in Nat) => (---:in Nat)]
>>      {move 1}



   define rightsucc u2:addx succ u2 = succ \
      addx u2

>>    rightsucc: [(u2_1:in Nat) => (---:prop)]
>>      {move 1}



   close

define isadd x addx:(addx 1 = succ x)&forall \
   rightsucc

>> isadd: [(x_1:in Nat),(addx_1:[(u2_2:in Nat)
>>         => (---:in Nat)])
>>      => (((addx_1(1) = succ(x_1)) & forall([(u2_3:
>>         in Nat) => ((addx_1(succ(u2_3)) = succ(addx_1(u2_3))):
>>         prop)]))
>>      :prop)]
>>   {move 0}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   postulate f u1:in Nat

>>    f: [(u1_1:in Nat) => (---:in Nat)]
>>      {move 1}



   postulate g u1:in Nat

>>    g: [(u1_1:in Nat) => (---:in Nat)]
>>      {move 1}



   close

declare fproof that isadd x f

>> fproof: that (x isadd f) {move 1}



declare gproof that isadd x g

>> gproof: that (x isadd g) {move 1}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   define rightsuccf u1:rightsucc u1

>>    rightsuccf: [(u1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

open

   open

      declare u1 in Nat

>>       u1: in Nat {move 3}



      postulate f1 u1:in Nat

>>       f1: [(u1_1:in Nat) => (---:in Nat)]
>>         {move 2}



      close

   declare u1 in Nat

>>    u1: in Nat {move 2}



   define genrightsucc f1,u1:f1 (succ u1) \
      = succ(f1 u1)

>>    genrightsucc: [(f1_1:[(u1_2:in Nat) =>
>>            (---:in Nat)]),
>>         (u1_1:in Nat) => (---:prop)]
>>      {move 1}



   open

      declare v1 in Nat

>>       v1: in Nat {move 3}



      define genrightsucc1 v1:genrightsucc \
         f1, v1

>>       genrightsucc1: [(v1_1:in Nat) => (---:
>>            prop)]
>>         {move 2}



      close

   define genrightsucc2 f1:forall genrightsucc1


>>    genrightsucc2: [(f1_1:[(u1_2:in Nat) =>
>>            (---:in Nat)])
>>         => (---:prop)]
>>      {move 1}



   close

define test x f, fproof:Andelim1 f 1 = succ \
   x,genrightsucc2 f,fproof

>> test: [(x_1:in Nat),(f_1:[(u1_2:in Nat) =>
>>         (---:in Nat)]),
>>      (fproof_1:that (x_1 isadd f_1)) => (Andelim1((f_1(1)
>>      = succ(x_1)),forall([(v1_3:in Nat) =>
>>         ((f_1(succ(v1_3)) = succ(f_1(v1_3))):
>>         prop)]),
>>      fproof_1):that (f_1(1) = succ(x_1)))]
>>   {move 0}



declare y in Nat

>> y: in Nat {move 1}



declare z in Nat

>> z: in Nat {move 1}



declare xz that x=z

>> xz: that (x = z) {move 1}



declare yz that y=z

>> yz: that (y = z) {move 1}



define symmtrans x y z xz yz:trans x z y \
   xz, symm y z yz

>> symmtrans: [(x_1:in Nat),(y_1:in Nat),(z_1:
>>      in Nat),(xz_1:that (x_1 = z_1)),(yz_1:
>>      that (y_1 = z_1)) => (trans(x_1,z_1,y_1,
>>      xz_1,symm(y_1,z_1,yz_1)):that (x_1 = y_1))]
>>   {move 0}



define test2 x, f, g, fproof gproof:symmtrans \
   f 1, g 1, succ x, test x, f, fproof, test \
   x, g, gproof

>> test2: [(x_1:in Nat),(f_1:[(u1_2:in Nat)
>>         => (---:in Nat)]),
>>      (g_1:[(u1_3:in Nat) => (---:in Nat)]),
>>      (fproof_1:that (x_1 isadd f_1)),(gproof_1:
>>      that (x_1 isadd g_1)) => (symmtrans(f_1(1),
>>      g_1(1),succ(x_1),test(x_1,f_1,fproof_1),
>>      test(x_1,g_1,gproof_1)):that (f_1(1) =
>>      g_1(1)))]
>>   {move 0}



define test3 x ,f , fproof:Andelim2 f 1 = \
   succ x, genrightsucc2 f,fproof

>> test3: [(x_1:in Nat),(f_1:[(u1_2:in Nat)
>>         => (---:in Nat)]),
>>      (fproof_1:that (x_1 isadd f_1)) => (Andelim2((f_1(1)
>>      = succ(x_1)),forall([(v1_3:in Nat) =>
>>         ((f_1(succ(v1_3)) = succ(f_1(v1_3))):
>>         prop)]),
>>      fproof_1):that forall([(v1_4:in Nat) =>
>>         ((f_1(succ(v1_4)) = succ(f_1(v1_4))):
>>         prop)]))
>>      ]
>>   {move 0}



open

   declare v1 in Nat

>>    v1: in Nat {move 2}



   define localprop v1:genrightsucc f, v1


>>    localprop: [(v1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

declare w in Nat

>> w: in Nat {move 1}



define test4 x, f, fproof w:Ui w, localprop, \
   test3 x, f, fproof

>> test4: [(x_1:in Nat),(f_1:[(u1_2:in Nat)
>>         => (---:in Nat)]),
>>      (fproof_1:that (x_1 isadd f_1)),(w_1:in
>>      Nat) => (Ui(w_1,[(v1_3:in Nat) => ((f_1(succ(v1_3))
>>         = succ(f_1(v1_3))):prop)]
>>      ,test3(x_1,f_1,fproof_1)):that (f_1(succ(w_1))
>>      = succ(f_1(w_1))))]
>>   {move 0}


comment  we need the "do the same thing to both sides" property of equality


open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   postulate h u1:in Nat

>>    h: [(u1_1:in Nat) => (---:in Nat)]
>>      {move 1}



   close

declare a in Nat

>> a: in Nat {move 1}



declare b in Nat

>> b: in Nat {move 1}



declare ab that a=b

>> ab: that (a = b) {move 1}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   define thecontext u1: h(a) = h(u1)

>>    thecontext: [(u1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

define bothsides h, a b ab:subs a b, thecontext, \
   ab, Refl h a

>> bothsides: [(h_1:[(u1_2:in Nat) => (---:in
>>         Nat)]),
>>      (a_1:in Nat),(b_1:in Nat),(ab_1:that (a_1
>>      = b_1)) => (subs(a_1,b_1,[(u1_3:in Nat)
>>         => ((h_1(a_1) = h_1(u1_3)):prop)]
>>      ,ab_1,Refl(h_1(a_1))):that (h_1(a_1) =
>>      h_1(b_1)))]
>>   {move 0}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   declare xxx that f(u1)=g(u1)

>>    xxx: that (f(u1) = g(u1)) {move 2}



   define step1 u1: test4 x, f, fproof, u1


>>    step1: [(u1_1:in Nat) => (---:that (f(succ(u1_1))
>>         = succ(f(u1_1))))]
>>      {move 1}



   define step3 u1: test4 x,g,gproof,u1

>>    step3: [(u1_1:in Nat) => (---:that (g(succ(u1_1))
>>         = succ(g(u1_1))))]
>>      {move 1}



   define step2 u1 xxx:bothsides succ, f \
      u1, g u1, xxx

>>    step2: [(u1_1:in Nat),(xxx_1:that (f(u1_1)
>>         = g(u1_1))) => (---:that (succ(f(u1_1))
>>         = succ(g(u1_1))))]
>>      {move 1}



   define step4 u1 xxx:trans f succ u1, succ \
      f u1, succ g u1,step1 u1, step2 u1 xxx


>>    step4: [(u1_1:in Nat),(xxx_1:that (f(u1_1)
>>         = g(u1_1))) => (---:that (f(succ(u1_1))
>>         = succ(g(u1_1))))]
>>      {move 1}



   define step5 u1 xxx:symmtrans f succ u1, \
      g succ u1, succ g u1, step4 u1 xxx,step3 \
      u1

>>    step5: [(u1_1:in Nat),(xxx_1:that (f(u1_1)
>>         = g(u1_1))) => (---:that (f(succ(u1_1))
>>         = g(succ(u1_1))))]
>>      {move 1}



   define theprop4 u1:f u1 = g u1

>>    theprop4: [(u1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

declare q in Nat

>> q: in Nat {move 1}



define partonesatz4 x,f,g,fproof,gproof,q: \
   Induction q,theprop4,test2 x,f,g,fproof \
   gproof,   step5

>> partonesatz4: [(x_1:in Nat),(f_1:[(u1_2:in
>>         Nat) => (---:in Nat)]),
>>      (g_1:[(u1_3:in Nat) => (---:in Nat)]),
>>      (fproof_1:that (x_1 isadd f_1)),(gproof_1:
>>      that (x_1 isadd g_1)),(q_1:in Nat) =>
>>      (Induction(q_1,[(u1_4:in Nat) => ((f_1(u1_4)
>>         = g_1(u1_4)):prop)]
>>      ,test2(x_1,f_1,g_1,fproof_1,gproof_1),
>>      [(u1_5:in Nat),(xxx_5:that (f_1(u1_5)
>>         = g_1(u1_5))) => (symmtrans(f_1(succ(u1_5)),
>>         g_1(succ(u1_5)),succ(g_1(u1_5)),trans(f_1(succ(u1_5)),
>>         succ(f_1(u1_5)),succ(g_1(u1_5)),test4(x_1,
>>         f_1,fproof_1,u1_5),bothsides(succ,f_1(u1_5),
>>         g_1(u1_5),xxx_5)),test4(x_1,g_1,gproof_1,
>>         u1_5)):that (f_1(succ(u1_5)) = g_1(succ(u1_5))))])
>>      :that (f_1(q_1) = g_1(q_1)))]
>>   {move 0}


comment second part of proposition 4

comment needs quantifier over functions from Nat to Nat

comment declare the existential quantifier over functions from Nat to Nat

clearcurrent


open

   open

      declare u1 in Nat

>>       u1: in Nat {move 3}



      postulate f1 u1:in Nat

>>       f1: [(u1_1:in Nat) => (---:in Nat)]
>>         {move 2}



      close

   postulate Fprop f1:prop

>>    Fprop: [(f1_1:[(u1_2:in Nat) => (---:in
>>            Nat)])
>>         => (---:prop)]
>>      {move 1}



   close

postulate Thereis Fprop:prop

>> Thereis: [(Fprop_1:[(f1_2:[(u1_3:in Nat)
>>            => (---:in Nat)])
>>         => (---:prop)])
>>      => (---:prop)]
>>   {move 0}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   postulate f1 u1:in Nat

>>    f1: [(u1_1:in Nat) => (---:in Nat)]
>>      {move 1}



   close

declare ev that Fprop f1

>> ev: that Fprop(f1) {move 1}



postulate Eifn Fprop, f1, ev:that Thereis \
   Fprop

>> Eifn: [(Fprop_1:[(f1_2:[(u1_3:in Nat) =>
>>            (---:in Nat)])
>>         => (---:prop)]),
>>      (f1_1:[(u1_4:in Nat) => (---:in Nat)]),
>>      (ev_1:that Fprop_1(f1_1)) => (---:that
>>      Thereis(Fprop_1))]
>>   {move 0}



declare ev2 that Thereis Fprop

>> ev2: that Thereis(Fprop) {move 1}



declare p prop

>> p: prop {move 1}



open

   open

      declare u1 in Nat

>>       u1: in Nat {move 3}



      postulate f2 u1:in Nat

>>       f2: [(u1_1:in Nat) => (---:in Nat)]
>>         {move 2}



      close

   declare ev3 that Fprop f2

>>    ev3: that Fprop(f2) {move 2}



   postulate using f2, ev3:that p

>>    using: [(f2_1:[(u1_2:in Nat) => (---:in
>>            Nat)]),
>>         (ev3_1:that Fprop(f2_1)) => (---:that
>>         p)]
>>      {move 1}



   close

postulate Egfn Fprop, ev2 p using: that p


>> Egfn: [(Fprop_1:[(f1_2:[(u1_3:in Nat) =>
>>            (---:in Nat)])
>>         => (---:prop)]),
>>      (ev2_1:that Thereis(Fprop_1)),(p_1:prop),
>>      (using_1:[(f2_4:[(u1_5:in Nat) => (---:
>>            in Nat)]),
>>         (ev3_4:that Fprop_1(f2_4)) => (---:
>>         that p_1)])
>>      => (---:that p_1)]
>>   {move 0}



declare x in Nat

>> x: in Nat {move 1}



open

   open

      declare u1 in Nat

>>       u1: in Nat {move 3}



      postulate f2 u1: in Nat

>>       f2: [(u1_1:in Nat) => (---:in Nat)]
>>         {move 2}



      close

   define thepropb4 f2:isadd x f2

>>    thepropb4: [(f2_1:[(u1_2:in Nat) => (---:
>>            in Nat)])
>>         => (---:prop)]
>>      {move 1}



   close

define Thepropb4 x:Thereis thepropb4

>> Thepropb4: [(x_1:in Nat) => (Thereis([(f2_2:
>>         [(u1_3:in Nat) => (---:in Nat)])
>>         => ((x_1 isadd f2_2):prop)])
>>      :prop)]
>>   {move 0}


comment we need to postulate a proof of isadd 1 succ


define basispart1: Refl succ 1

>> basispart1: [(Refl(succ(1)):that (succ(1)
>>      = succ(1)))]
>>   {move 0}



open

   declare u1 in Nat

>>    u1: in Nat {move 2}



   define bpart2 u1: Refl succ succ u1

>>    bpart2: [(u1_1:in Nat) => (---:that (succ(succ(u1_1))
>>         = succ(succ(u1_1))))]
>>      {move 1}



   define bparttwoprop u1: succ succ u1 = \
      succ succ u1

>>    bparttwoprop: [(u1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

define basispart2: Ug bparttwoprop, bpart2


>> basispart2: [(Ug([(u1_1:in Nat) => ((succ(succ(u1_1))
>>         = succ(succ(u1_1))):prop)]
>>      ,[(u1_1:in Nat) => (Refl(succ(succ(u1_1))):
>>         that (succ(succ(u1_1)) = succ(succ(u1_1))))])
>>      :that forall([(u1_2:in Nat) => ((succ(succ(u1_2))
>>         = succ(succ(u1_2))):prop)]))
>>      ]
>>   {move 0}



open

   open

      declare u1 in Nat

>>       u1: in Nat {move 3}



      postulate f2 u1:in Nat

>>       f2: [(u1_1:in Nat) => (---:in Nat)]
>>         {move 2}



      close

   define basisprop f2: 1 isadd f2

>>    basisprop: [(f2_1:[(u1_2:in Nat) => (---:
>>            in Nat)])
>>         => (---:prop)]
>>      {move 1}



   close

define thebasis: Eifn basisprop, succ, Andproof \
   succ 1 = succ 1, forall bparttwoprop, basispart1 \
   basispart2

>> thebasis: [(Eifn([(f2_1:[(u1_2:in Nat) =>
>>            (---:in Nat)])
>>         => ((1 isadd f2_1):prop)]
>>      ,succ,Andproof((succ(1) = succ(1)),forall([(u1_1:
>>         in Nat) => ((succ(succ(u1_1)) = succ(succ(u1_1))):
>>         prop)]),
>>      basispart1,basispart2)):that Thereis([(f2_3:
>>         [(u1_4:in Nat) => (---:in Nat)])
>>         => ((1 isadd f2_3):prop)]))
>>      ]
>>   {move 0}


comment The induction step of part two of proposition 4.

comment Our goal is to prove that if there is a function f such that x isadd f

comment then there is a function f2 such that (succ x) isadd f2


open

   declare k in Nat

>>    k: in Nat {move 2}



   declare indhyp that Thepropb4 k

>>    indhyp: that Thepropb4(k) {move 2}



   open

      open

         declare uu in Nat

>>          uu: in Nat {move 4}



         postulate f uu: in Nat

>>          f: [(uu_1:in Nat) => (---:in Nat)]
>>            {move 3}



         close

      declare evv that isadd k f

>>       evv: that (k isadd f) {move 3}


          comment Our goal now is to produce a proof

          comment that there is f2 such that isadd (succ k) f2


      open

         declare vv in Nat

>>          vv: in Nat {move 4}



         define f2 vv: succ (f vv)

>>          f2: [(vv_1:in Nat) => (---:in Nat)]
>>            {move 3}



         close

>> Inspector Lestrade says:  Done reading scratch to landau_axioms:
>>  type lines or type quit to exit interface

quit


