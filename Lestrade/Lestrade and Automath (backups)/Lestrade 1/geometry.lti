
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  7/24/2019
>>  12:30 pm Boise time


% try to develop Euclidean plane geometry under Lestrade.

% I think this will make useful points.

% Logic


declare p prop

>> p: prop {move 1}



declare q prop

>> q: prop {move 1}



postulate or p q prop

>> or: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



postulate not p prop

>> not: [(p_1:prop) => (---:prop)]
>>   {move 0}



declare pq that p or q

>> pq: that (p or q) {move 1}



declare notp that not p

>> notp: that not(p) {move 1}



declare notq that not q

>> notq: that not(q) {move 1}



postulate Ds1 pq notq that p

>> Ds1: [(.p_1:prop),(.q_1:prop),(pq_1:that
>>      (.p_1 or .q_1)),(notq_1:that not(.q_1))
>>      => (---:that .p_1)]
>>   {move 0}



postulate Ds2 pq notp that q

>> Ds2: [(.p_1:prop),(.q_1:prop),(pq_1:that
>>      (.p_1 or .q_1)),(notp_1:that not(.p_1))
>>      => (---:that .q_1)]
>>   {move 0}



postulate Excmid p that p or not p

>> Excmid: [(p_1:prop) => (---:that (p_1 or
>>      not(p_1)))]
>>   {move 0}



declare dnegp that not (not p)

>> dnegp: that not(not(p)) {move 1}



define Dneg dnegp : Ds1 (Excmid p, dnegp)


>> Dneg: [(.p_1:prop),(dnegp_1:that not(not(.p_1)))
>>      => ((Excmid(.p_1) Ds1 dnegp_1):that .p_1)]
>>   {move 0}



declare pp that p

>> pp: that p {move 1}



declare qq that q

>> qq: that q {move 1}



postulate Add1 q pp that p or q

>> Add1: [(q_1:prop),(.p_1:prop),(pp_1:that
>>      .p_1) => (---:that (.p_1 or q_1))]
>>   {move 0}



postulate Add2 p qq that p or q

>> Add2: [(p_1:prop),(.q_1:prop),(qq_1:that
>>      .q_1) => (---:that (p_1 or .q_1))]
>>   {move 0}



define Absurd q notp pp : Ds2 (Add1 q pp, \
   notp)

>> Absurd: [(q_1:prop),(.p_1:prop),(notp_1:that
>>      not(.p_1)),(pp_1:that .p_1) => (((q_1
>>      Add1 pp_1) Ds2 notp_1):that q_1)]
>>   {move 0}



declare r prop

>> r: prop {move 1}



open

   declare pp1 that p

>>    pp1: that p {move 2}



   postulate pthenr pp1 that r

>>    pthenr: [(pp1_1:that p) => (---:that r)]
>>      {move 1}



   declare qq1 that q

>>    qq1: that q {move 2}



   postulate qthenr qq1 that r

>>    qthenr: [(qq1_1:that q) => (---:that r)]
>>      {move 1}



   close

postulate Cases pq pthenr, qthenr: that r


>> Cases: [(.p_1:prop),(.q_1:prop),(pq_1:that
>>      (.p_1 or .q_1)),(.r_1:prop),(pthenr_1:
>>      [(pp1_2:that .p_1) => (---:that .r_1)]),
>>      (qthenr_1:[(qq1_3:that .q_1) => (---:that
>>         .r_1)])
>>      => (---:that .r_1)]
>>   {move 0}



open

   declare notp2 that not p

>>    notp2: that not(p) {move 2}



   postulate contraprf notp2 that p

>>    contraprf: [(notp2_1:that not(p)) => (---:
>>         that p)]
>>      {move 1}



   declare pp2 that p

>>    pp2: that p {move 2}



   define ppid pp2 : pp2

>>    ppid: [(pp2_1:that p) => (---:that p)]
>>      {move 1}



   close

define Contraprf contraprf : Cases (Excmid \
   p, ppid, contraprf)

>> Contraprf: [(.p_1:prop),(contraprf_1:[(notp2_2:
>>         that not(.p_1)) => (---:that .p_1)])
>>      => (Cases(Excmid(.p_1),[(pp2_3:that .p_1)
>>         => (pp2_3:that .p_1)]
>>      ,contraprf_1):that .p_1)]
>>   {move 0}



define and p q : not ((not p) or not q)

>> and: [(p_1:prop),(q_1:prop) => (not((not(p_1)
>>      or not(q_1))):prop)]
>>   {move 0}



declare pandq that p and q

>> pandq: that (p and q) {move 1}



open

   declare notp2 that not p

>>    notp2: that not(p) {move 2}



   define bad1 notp2 : Add1 (not q,notp2)


>>    bad1: [(notp2_1:that not(p)) => (---:that
>>         (not(p) or not(q)))]
>>      {move 1}



   define bad2 notp2 : Absurd p pandq bad1 \
      notp2

>>    bad2: [(notp2_1:that not(p)) => (---:that
>>         p)]
>>      {move 1}



   close

define Andelim1 pandq : Contraprf bad2

>> Andelim1: [(.p_1:prop),(.q_1:prop),(pandq_1:
>>      that (.p_1 and .q_1)) => (Contraprf([(notp2_2:
>>         that not(.p_1)) => (Absurd(.p_1,pandq_1,
>>         (not(.q_1) Add1 notp2_2)):that .p_1)])
>>      :that .p_1)]
>>   {move 0}



open

   declare notq2 that not q

>>    notq2: that not(q) {move 2}



   define bad3 notq2 : Add2 (not p,notq2)


>>    bad3: [(notq2_1:that not(q)) => (---:that
>>         (not(p) or not(q)))]
>>      {move 1}



   define bad4 notq2 : Absurd q pandq bad3 \
      notq2

>>    bad4: [(notq2_1:that not(q)) => (---:that
>>         q)]
>>      {move 1}



   close

open

   declare threenot that not (not (not p))


>>    threenot: that not(not(not(p))) {move
>>      2}



   define dneg22 threenot : Absurd (not (not \
      p), Dneg threenot, pp)

>>    dneg22: [(threenot_1:that not(not(not(p))))
>>         => (---:that not(not(p)))]
>>      {move 1}



   close

define Dneg2 pp : Contraprf dneg22

>> Dneg2: [(.p_1:prop),(pp_1:that .p_1) => (Contraprf([(threenot_2:
>>         that not(not(not(.p_1)))) => (Absurd(not(not(.p_1)),
>>         Dneg(threenot_2),pp_1):that not(not(.p_1)))])
>>      :that not(not(.p_1)))]
>>   {move 0}



define Andelim2 pandq : Contraprf bad4

>> Andelim2: [(.p_1:prop),(.q_1:prop),(pandq_1:
>>      that (.p_1 and .q_1)) => (Contraprf([(notq2_2:
>>         that not(.q_1)) => (Absurd(.q_1,pandq_1,
>>         (not(.p_1) Add2 notq2_2)):that .q_1)])
>>      :that .q_1)]
>>   {move 0}



open

   declare notpandq that not (p and q)

>>    notpandq: that not((p and q)) {move 2}



   define andstep1 notpandq : Dneg notpandq


>>    andstep1: [(notpandq_1:that not((p and
>>         q))) => (---:that (not(p) or not(q)))]
>>      {move 1}



   define andstep2 notpandq : Ds1 (andstep1 \
      notpandq,Dneg2 qq)

>>    andstep2: [(notpandq_1:that not((p and
>>         q))) => (---:that not(p))]
>>      {move 1}



   define andstep3 notpandq : Absurd (p and \
      q,andstep2 notpandq,pp)

>>    andstep3: [(notpandq_1:that not((p and
>>         q))) => (---:that (p and q))]
>>      {move 1}



   close

define Andintro pp qq: Contraprf andstep3


>> Andintro: [(.p_1:prop),(pp_1:that .p_1),(.q_1:
>>      prop),(qq_1:that .q_1) => (Contraprf([(notpandq_2:
>>         that not((.p_1 and .q_1))) => (Absurd((.p_1
>>         and .q_1),(Dneg(notpandq_2) Ds1 Dneg2(qq_1)),
>>         pp_1):that (.p_1 and .q_1))])
>>      :that (.p_1 and .q_1))]
>>   {move 0}


% Equality


declare t type

>> t: type {move 1}



declare x in t

>> x: in t {move 1}



declare y in t

>> y: in t {move 1}



postulate equal x y prop

>> equal: [(.t_1:type),(x_1:in .t_1),(y_1:in
>>      .t_1) => (---:prop)]
>>   {move 0}



postulate Refl x that x equal x

>> Refl: [(.t_1:type),(x_1:in .t_1) => (---:
>>      that (x_1 equal x_1))]
>>   {move 0}



open

   declare x1 in t

>>    x1: in t {move 2}



   postulate tpred x1 prop

>>    tpred: [(x1_1:in t) => (---:prop)]
>>      {move 1}



   close

declare eqev that x equal y

>> eqev: that (x equal y) {move 1}



declare tpredev that tpred x

>> tpredev: that tpred(x) {move 1}



postulate Subs tpred, eqev tpredev that tpred \
   y

>> Subs: [(.t_1:type),(tpred_1:[(x1_2:in .t_1)
>>         => (---:prop)]),
>>      (.x_1:in .t_1),(.y_1:in .t_1),(eqev_1:
>>      that (.x_1 equal .y_1)),(tpredev_1:that
>>      tpred_1(.x_1)) => (---:that tpred_1(.y_1))]
>>   {move 0}



define two x y : not(x equal y)

>> two: [(.t_1:type),(x_1:in .t_1),(y_1:in .t_1)
>>      => (not((x_1 equal y_1)):prop)]
>>   {move 0}



open

   declare y1 in t

>>    y1: in t {move 2}



   define symmpred y1: y1 equal x

>>    symmpred: [(y1_1:in t) => (---:prop)]
>>      {move 1}



   close

define Symm eqev : Subs symmpred, eqev (Refl \
   x)

>> Symm: [(.t_1:type),(.x_1:in .t_1),(.y_1:in
>>      .t_1),(eqev_1:that (.x_1 equal .y_1))
>>      => (Subs([(y1_2:in .t_1) => ((y1_2 equal
>>         .x_1):prop)]
>>      ,eqev_1,Refl(.x_1)):that (.y_1 equal .x_1))]
>>   {move 0}



declare twoev that x two y

>> twoev: that (x two y) {move 1}



open

   declare nottwoev that not (y two x)

>>    nottwoev: that not((y two x)) {move 2}



   define newtwoev1 nottwoev: Symm (Dneg \
      nottwoev)

>>    newtwoev1: [(nottwoev_1:that not((y two
>>         x))) => (---:that (x equal y))]
>>      {move 1}



   define newtwoev2 nottwoev: Absurd(y two \
      x,twoev, newtwoev1 nottwoev)

>>    newtwoev2: [(nottwoev_1:that not((y two
>>         x))) => (---:that (y two x))]
>>      {move 1}



   close

define Twosymm twoev : Contraprf newtwoev2


>> Twosymm: [(.t_1:type),(.x_1:in .t_1),(.y_1:
>>      in .t_1),(twoev_1:that (.x_1 two .y_1))
>>      => (Contraprf([(nottwoev_2:that not((.y_1
>>         two .x_1))) => (Absurd((.y_1 two .x_1),
>>         twoev_1,Symm(Dneg(nottwoev_2))):that
>>         (.y_1 two .x_1))])
>>      :that (.y_1 two .x_1))]
>>   {move 0}



declare z in t

>> z: in t {move 1}



declare eqev2 that y equal z

>> eqev2: that (y equal z) {move 1}



open

   declare y1 in t

>>    y1: in t {move 2}



   define transpred y1 : x equal y1

>>    transpred: [(y1_1:in t) => (---:prop)]
>>      {move 1}



   close

define Trans eqev eqev2 : Subs transpred, \
   eqev2 eqev

>> Trans: [(.t_1:type),(.x_1:in .t_1),(.y_1:
>>      in .t_1),(eqev_1:that (.x_1 equal .y_1)),
>>      (.z_1:in .t_1),(eqev2_1:that (.y_1 equal
>>      .z_1)) => (Subs([(y1_2:in .t_1) => ((.x_1
>>         equal y1_2):prop)]
>>      ,eqev2_1,eqev_1):that (.x_1 equal .z_1))]
>>   {move 0}


% Geometry


postulate point type

>> point: type {move 0}



postulate line type

>> line: type {move 0}



declare A in point

>> A: in point {move 1}



declare B in point

>> B: in point {move 1}



declare L in line

>> L: in line {move 1}


% there is exactly one line through any two distinct points


postulate on A L prop

>> on: [(A_1:in point),(L_1:in line) => (---:
>>      prop)]
>>   {move 0}



declare abdiff that A two B

>> abdiff: that (A two B) {move 1}



postulate theline abdiff in line

>> theline: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (---:
>>      in line)]
>>   {move 0}



postulate Ontheline1 abdiff that A on theline \
   abdiff

>> Ontheline1: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (---:
>>      that (.A_1 on theline(abdiff_1)))]
>>   {move 0}



postulate Ontheline2 abdiff that B on theline \
   abdiff

>> Ontheline2: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (---:
>>      that (.B_1 on theline(abdiff_1)))]
>>   {move 0}



declare aonl that A on L

>> aonl: that (A on L) {move 1}



declare bonl that B on L

>> bonl: that (B on L) {move 1}



postulate Oneline abdiff aonl bonl that L \
   equal theline abdiff

>> Oneline: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)),(.L_1:
>>      in line),(aonl_1:that (.A_1 on .L_1)),
>>      (bonl_1:that (.B_1 on .L_1)) => (---:that
>>      (.L_1 equal theline(abdiff_1)))]
>>   {move 0}



define linesymm1 abdiff : Ontheline1 (Twosymm \
   abdiff)

>> linesymm1: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (Ontheline1(Twosymm(abdiff_1)):
>>      that (.B_1 on theline(Twosymm(abdiff_1))))]
>>   {move 0}



define linesymm2 abdiff : Ontheline2 (Twosymm \
   abdiff)

>> linesymm2: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (Ontheline2(Twosymm(abdiff_1)):
>>      that (.A_1 on theline(Twosymm(abdiff_1))))]
>>   {move 0}



define Linesymm abdiff : Symm(Oneline (abdiff, \
   linesymm2 abdiff,linesymm1 abdiff))

>> Linesymm: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)) => (Symm(Oneline(abdiff_1,
>>      linesymm2(abdiff_1),linesymm1(abdiff_1))):
>>      that (theline(abdiff_1) equal theline(Twosymm(abdiff_1))))]
>>   {move 0}



declare M in line

>> M: in line {move 1}



declare lnotm that L two M

>> lnotm: that (L two M) {move 1}



declare C in point

>> C: in point {move 1}



declare D in point

>> D: in point {move 1}



declare conl that C on L

>> conl: that (C on L) {move 1}



declare conm that C on M

>> conm: that (C on M) {move 1}



declare donl that D on L

>> donl: that (D on L) {move 1}



declare donm that D on M

>> donm: that (D on M) {move 1}



open

   declare cnotd that C two D

>>    cnotd: that (C two D) {move 2}



   define liscd cnotd : Oneline cnotd conl \
      donl

>>    liscd: [(cnotd_1:that (C two D)) => (---:
>>         that (L equal theline(cnotd_1)))]
>>      {move 1}



   define miscd cnotd : Oneline cnotd conm \
      donm

>>    miscd: [(cnotd_1:that (C two D)) => (---:
>>         that (M equal theline(cnotd_1)))]
>>      {move 1}



   define lism cnotd : Trans (liscd cnotd, \
      Symm (miscd cnotd))

>>    lism: [(cnotd_1:that (C two D)) => (---:
>>         that (L equal M))]
>>      {move 1}



   define cisd cnotd : Absurd (C equal D, \
      lnotm,lism cnotd)

>>    cisd: [(cnotd_1:that (C two D)) => (---:
>>         that (C equal D))]
>>      {move 1}



   close

define Oneintersect lnotm conl conm donl \
   donm : Contraprf cisd

>> Oneintersect: [(.L_1:in line),(.M_1:in line),
>>      (lnotm_1:that (.L_1 two .M_1)),(.C_1:in
>>      point),(conl_1:that (.C_1 on .L_1)),(conm_1:
>>      that (.C_1 on .M_1)),(.D_1:in point),(donl_1:
>>      that (.D_1 on .L_1)),(donm_1:that (.D_1
>>      on .M_1)) => (Contraprf([(cnotd_2:that
>>         (.C_1 two .D_1)) => (Absurd((.C_1 equal
>>         .D_1),lnotm_1,(Oneline(cnotd_2,conl_1,
>>         donl_1) Trans Symm(Oneline(cnotd_2,
>>         conm_1,donm_1)))):that (.C_1 equal
>>         .D_1))])
>>      :that (.C_1 equal .D_1))]
>>   {move 0}


% basic postulateions for parallelism and intersection


postulate parallel L M prop

>> parallel: [(L_1:in line),(M_1:in line) =>
>>      (---:prop)]
>>   {move 0}



declare parev that parallel L M

>> parev: that (L parallel M) {move 1}



postulate Notmeet A parev that (not (A on \
   L)) or not (A on M)

>> Notmeet: [(A_1:in point),(.L_1:in line),(.M_1:
>>      in line),(parev_1:that (.L_1 parallel
>>      .M_1)) => (---:that (not((A_1 on .L_1))
>>      or not((A_1 on .M_1))))]
>>   {move 0}



declare notparev that not(parallel L M)

>> notparev: that not((L parallel M)) {move
>>   1}



postulate intersection notparev in point


>> intersection: [(.L_1:in line),(.M_1:in line),
>>      (notparev_1:that not((.L_1 parallel .M_1)))
>>      => (---:in point)]
>>   {move 0}



postulate Intersects1 notparev that (intersection \
   notparev) on L

>> Intersects1: [(.L_1:in line),(.M_1:in line),
>>      (notparev_1:that not((.L_1 parallel .M_1)))
>>      => (---:that (intersection(notparev_1)
>>      on .L_1))]
>>   {move 0}



postulate Intersects2 notparev that (intersection \
   notparev) on M

>> Intersects2: [(.L_1:in line),(.M_1:in line),
>>      (notparev_1:that not((.L_1 parallel .M_1)))
>>      => (---:that (intersection(notparev_1)
>>      on .M_1))]
>>   {move 0}


% betweenness


postulate inorder A B C : prop

>> inorder: [(A_1:in point),(B_1:in point),(C_1:
>>      in point) => (---:prop)]
>>   {move 0}



declare orderev that inorder A B C

>> orderev: that inorder(A,B,C) {move 1}



postulate Revorder orderev that inorder C \
   B A

>> Revorder: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (---:that inorder(.C_1,
>>      .B_1,.A_1))]
>>   {move 0}



postulate Orderdiff1 orderev that A two B


>> Orderdiff1: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (---:that (.A_1 two .B_1))]
>>   {move 0}



postulate Orderdiff2 orderev that A two C


>> Orderdiff2: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (---:that (.A_1 two .C_1))]
>>   {move 0}



define Orderdiff3 orderev : Twosymm(Orderdiff1 \
   (Revorder orderev))

>> Orderdiff3: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (Twosymm(Orderdiff1(Revorder(orderev_1))):
>>      that (.B_1 two .C_1))]
>>   {move 0}



postulate Orderline orderev that B on theline \
   (Orderdiff2 orderev)

>> Orderline: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (---:that (.B_1 on theline(Orderdiff2(orderev_1))))]
>>   {move 0}



define Orderline21 orderev : Ontheline1 (Orderdiff2 \
   orderev)

>> Orderline21: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (Ontheline1(Orderdiff2(orderev_1)):
>>      that (.A_1 on theline(Orderdiff2(orderev_1))))]
>>   {move 0}



define Orderline22 orderev : Ontheline2 (Orderdiff2 \
   orderev)

>> Orderline22: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (Ontheline2(Orderdiff2(orderev_1)):
>>      that (.C_1 on theline(Orderdiff2(orderev_1))))]
>>   {move 0}



define Orderline23 orderev : Oneline (Orderdiff1 \
   orderev,Orderline21 orderev,Orderline orderev)


>> Orderline23: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (Oneline(Orderdiff1(orderev_1),
>>      Orderline21(orderev_1),Orderline(orderev_1)):
>>      that (theline(Orderdiff2(orderev_1)) equal
>>      theline(Orderdiff1(orderev_1))))]
>>   {move 0}



open

   declare L1 in line

>>    L1: in line {move 2}



   define conlpred L1 : C on L1

>>    conlpred: [(L1_1:in line) => (---:prop)]
>>      {move 1}



   close

define Orderline2 orderev : Subs conlpred, \
   Orderline23 orderev, Orderline22 orderev


>> Orderline2: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)) => (Subs([(L1_2:in line) =>
>>         ((.C_1 on L1_2):prop)]
>>      ,Orderline23(orderev_1),Orderline22(orderev_1)):
>>      that (.C_1 on theline(Orderdiff1(orderev_1))))]
>>   {move 0}



declare acdiff that A two C

>> acdiff: that (A two C) {move 1}



declare bcdiff that B two C

>> bcdiff: that (B two C) {move 1}



declare abcinline that C on theline abdiff


>> abcinline: that (C on theline(abdiff)) {move
>>   1}



postulate Ordercases abdiff acdiff bcdiff \
   abcinline that (inorder A B C) or (inorder \
   A C B) or (inorder B A C)

>> Ordercases: [(.A_1:in point),(.B_1:in point),
>>      (abdiff_1:that (.A_1 two .B_1)),(.C_1:
>>      in point),(acdiff_1:that (.A_1 two .C_1)),
>>      (bcdiff_1:that (.B_1 two .C_1)),(abcinline_1:
>>      that (.C_1 on theline(abdiff_1))) => (---:
>>      that (inorder(.A_1,.B_1,.C_1) or (inorder(.A_1,
>>      .C_1,.B_1) or inorder(.B_1,.A_1,.C_1))))]
>>   {move 0}



postulate Ordercases2 A B C that not (inorder \
   A B C) or not (inorder A C B)

>> Ordercases2: [(A_1:in point),(B_1:in point),
>>      (C_1:in point) => (---:that (not(inorder(A_1,
>>      B_1,C_1)) or not(inorder(A_1,C_1,B_1))))]
>>   {move 0}



declare orderev2 that inorder A C D

>> orderev2: that inorder(A,C,D) {move 1}



postulate Ordertrans1 orderev orderev2 that \
   inorder B C D

>> Ordertrans1: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)),(.D_1:in point),(orderev2_1:
>>      that inorder(.A_1,.C_1,.D_1)) => (---:
>>      that inorder(.B_1,.C_1,.D_1))]
>>   {move 0}



postulate Ordertrans2 orderev orderev2 that \
   inorder A B D

>> Ordertrans2: [(.A_1:in point),(.B_1:in point),
>>      (.C_1:in point),(orderev_1:that inorder(.A_1,
>>      .B_1,.C_1)),(.D_1:in point),(orderev2_1:
>>      that inorder(.A_1,.C_1,.D_1)) => (---:
>>      that inorder(.A_1,.B_1,.D_1))]
>>   {move 0}



>> Inspector Lestrade says:  Done reading scratch to geometry:
>>  type lines or type quit to exit interface

quit


