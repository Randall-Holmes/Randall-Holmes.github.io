
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  7/24/2019
>>  12:30 pm Boise time


comment Declarations for equality types in the style of HOTT


declare a type

>> a: type {move 1}



declare b type

>> b: type {move 1}



declare x in a

>> x: in a {move 1}



declare y in a

>> y: in a {move 1}



postulate = a x y:type

>> =: [(a_1:type),(x_1:in a_1),(y_1:in a_1)
>>      => (---:type)]
>>   {move 0}



open

   declare u in a

>>    u: in a {move 2}



   postulate C u:type

>>    C: [(u_1:in a) => (---:type)]
>>      {move 1}



   close

declare p in = a x y

>> p: in =(a,x,y) {move 1}



declare q in C x

>> q: in C(x) {move 1}



postulate subs a x y C, p q:in C y

>> subs: [(a_1:type),(x_1:in a_1),(y_1:in a_1),
>>      (C_1:[(u_2:in a_1) => (---:type)]),
>>      (p_1:in =(a_1,x_1,y_1)),(q_1:in C_1(x_1))
>>      => (---:in C_1(y_1))]
>>   {move 0}



postulate refl a x:in = a x x

>> refl: [(a_1:type),(x_1:in a_1) => (---:in
>>      =(a_1,x_1,x_1))]
>>   {move 0}



postulate triv a x C, q:in = C x q, subs \
   a x x C, refl a x q

>> triv: [(a_1:type),(x_1:in a_1),(C_1:[(u_2:
>>         in a_1) => (---:type)]),
>>      (q_1:in C_1(x_1)) => (---:in =(C_1(x_1),
>>      q_1,subs(a_1,x_1,x_1,C_1,(a_1 refl x_1),
>>      q_1)))]
>>   {move 0}



open

   declare pp in = a x y

>>    pp: in =(a,x,y) {move 2}



   postulate D pp:type

>>    D: [(pp_1:in =(a,x,y)) => (---:type)]
>>      {move 1}



   close

open

   declare xx in a

>>    xx: in a {move 2}



   declare yy in a

>>    yy: in a {move 2}



   declare pp in = a xx yy

>>    pp: in =(a,xx,yy) {move 2}



   postulate Dd xx yy pp: type

>>    Dd: [(xx_1:in a),(yy_1:in a),(pp_1:in
>>         =(a,xx_1,yy_1)) => (---:type)]
>>      {move 1}



   close

open

   declare xx in a

>>    xx: in a {move 2}



   postulate r xx:in Dd xx xx, refl a xx


>>    r: [(xx_1:in a) => (---:in Dd(xx_1,xx_1,
>>         (a refl xx_1)))]
>>      {move 1}



   close

postulate Pathind a x y p, Dd, r:in Dd x \
   y p

>> Pathind: [(a_1:type),(x_1:in a_1),(y_1:in
>>      a_1),(p_1:in =(a_1,x_1,y_1)),(Dd_1:[(xx_2:
>>         in a_1),(yy_2:in a_1),(pp_2:in =(a_1,
>>         xx_2,yy_2)) => (---:type)]),
>>      (r_1:[(xx_3:in a_1) => (---:in Dd_1(xx_3,
>>         xx_3,(a_1 refl xx_3)))])
>>      => (---:in Dd_1(x_1,y_1,p_1))]
>>   {move 0}



postulate Pathind2 a x, Dd, r:in (Dd x x, \
   refl a x) = r x, Pathind a x x, refl a x, \
   Dd, r

>> Pathind2: [(a_1:type),(x_1:in a_1),(Dd_1:
>>      [(xx_2:in a_1),(yy_2:in a_1),(pp_2:in
>>         =(a_1,xx_2,yy_2)) => (---:type)]),
>>      (r_1:[(xx_3:in a_1) => (---:in Dd_1(xx_3,
>>         xx_3,(a_1 refl xx_3)))])
>>      => (---:in =(Dd_1(x_1,x_1,(a_1 refl x_1)),
>>      r_1(x_1),Pathind(a_1,x_1,x_1,(a_1 refl
>>      x_1),Dd_1,r_1)))]
>>   {move 0}



>> Inspector Lestrade says:  Done reading scratch to equality:
>>  type lines or type quit to exit interface

quit


