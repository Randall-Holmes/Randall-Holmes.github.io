
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  7/24/2019
>>  12:30 pm Boise time


% Lestrade text supporting discrete math text.


postulate Nat type

>> Nat: type {move 0}



postulate 1 in Nat

>> 1: in Nat {move 0}



declare n in Nat

>> n: in Nat {move 1}



postulate Succ n in Nat

>> Succ: [(n_1:in Nat) => (---:in Nat)]
>>   {move 0}



define 2 : Succ 1

>> 2: [(Succ(1):in Nat)]
>>   {move 0}



define 3 : Succ 2

>> 3: [(Succ(2):in Nat)]
>>   {move 0}



define 4 : Succ 3

>> 4: [(Succ(3):in Nat)]
>>   {move 0}



define 5 : Succ 4

>> 5: [(Succ(4):in Nat)]
>>   {move 0}



define Addtwo n : Succ Succ n

>> Addtwo: [(n_1:in Nat) => (Succ(Succ(n_1)):
>>      in Nat)]
>>   {move 0}



declare m in Nat

>> m: in Nat {move 1}



postulate + n m : in Nat

>> +: [(n_1:in Nat),(m_1:in Nat) => (---:in
>>      Nat)]
>>   {move 0}



postulate * n m : in Nat

>> *: [(n_1:in Nat),(m_1:in Nat) => (---:in
>>      Nat)]
>>   {move 0}



postulate ^ n m : in Nat

>> ^: [(n_1:in Nat),(m_1:in Nat) => (---:in
>>      Nat)]
>>   {move 0}



define f n : (n^2) + 1

>> f: [(n_1:in Nat) => (((n_1 ^ 2) + 1):in Nat)]
>>   {move 0}



postulate Natfun2 type

>> Natfun2: type {move 0}



open

   declare x in Nat

>>    x: in Nat {move 2}



   declare y in Nat

>>    y: in Nat {move 2}



   postulate F x y : in Nat

>>    F: [(x_1:in Nat),(y_1:in Nat) => (---:
>>         in Nat)]
>>      {move 1}



   close

postulate natfun2 F : in Natfun2

>> natfun2: [(F_1:[(x_2:in Nat),(y_2:in Nat)
>>         => (---:in Nat)])
>>      => (---:in Natfun2)]
>>   {move 0}



declare a in Nat

>> a: in Nat {move 1}



declare b in Nat

>> b: in Nat {move 1}



open

   declare x in Nat

>>    x: in Nat {move 2}



   declare y in Nat

>>    y: in Nat {move 2}



   define g x y : (a * x) + b * y

>>    g: [(x_1:in Nat),(y_1:in Nat) => (---:
>>         in Nat)]
>>      {move 1}



   close

define Lincomb a b : natfun2 g

>> Lincomb: [(a_1:in Nat),(b_1:in Nat) => (natfun2([(x_2:
>>         in Nat),(y_2:in Nat) => (((a_1 * x_2)
>>         + (b_1 * y_2)):in Nat)])
>>      :in Natfun2)]
>>   {move 0}



declare p prop

>> p: prop {move 1}



declare q prop

>> q: prop {move 1}



postulate & p q : prop

>> &: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



declare pp that p

>> pp: that p {move 1}



declare qq that q

>> qq: that q {move 1}



postulate Conjunction pp qq : that p & q


>> Conjunction: [(.p_1:prop),(pp_1:that .p_1),
>>      (.q_1:prop),(qq_1:that .q_1) => (---:that
>>      (.p_1 & .q_1))]
>>   {move 0}



declare rr that p & q

>> rr: that (p & q) {move 1}



postulate Simplification1 rr : that p

>> Simplification1: [(.p_1:prop),(.q_1:prop),
>>      (rr_1:that (.p_1 & .q_1)) => (---:that
>>      .p_1)]
>>   {move 0}



postulate Simplification2 rr : that q

>> Simplification2: [(.p_1:prop),(.q_1:prop),
>>      (rr_1:that (.p_1 & .q_1)) => (---:that
>>      .q_1)]
>>   {move 0}



define Conjcomm rr : Conjunction (Simplification2 \
   rr, Simplification1 rr)

>> Conjcomm: [(.p_1:prop),(.q_1:prop),(rr_1:
>>      that (.p_1 & .q_1)) => ((Simplification2(rr_1)
>>      Conjunction Simplification1(rr_1)):that
>>      (.q_1 & .p_1))]
>>   {move 0}



postulate -> p q : prop

>> ->: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



declare ss that p -> q

>> ss: that (p -> q) {move 1}



postulate Mp pp ss : that q

>> Mp: [(.p_1:prop),(pp_1:that .p_1),(.q_1:prop),
>>      (ss_1:that (.p_1 -> .q_1)) => (---:that
>>      .q_1)]
>>   {move 0}



open

   declare pp1 that p

>>    pp1: that p {move 2}



   postulate Ded pp1 : that q

>>    Ded: [(pp1_1:that p) => (---:that q)]
>>      {move 1}



   close

postulate Deduction Ded : that p -> q

>> Deduction: [(.p_1:prop),(.q_1:prop),(Ded_1:
>>      [(pp1_2:that .p_1) => (---:that .q_1)])
>>      => (---:that (.p_1 -> .q_1))]
>>   {move 0}



open

   declare cc1 that p & q

>>    cc1: that (p & q) {move 2}



   define conjproof cc1 : Conjcomm cc1

>>    conjproof: [(cc1_1:that (p & q)) => (---:
>>         that (q & p))]
>>      {move 1}



   close

define Conjthm p q : Deduction conjproof


>> Conjthm: [(p_1:prop),(q_1:prop) => (Deduction([(cc1_2:
>>         that (p_1 & q_1)) => (Conjcomm(cc1_2):
>>         that (q_1 & p_1))])
>>      :that ((p_1 & q_1) -> (q_1 & p_1)))]
>>   {move 0}



define <-> p q : (p -> q) & q -> p

>> <->: [(p_1:prop),(q_1:prop) => (((p_1 ->
>>      q_1) & (q_1 -> p_1)):prop)]
>>   {move 0}



declare uu that p->q

>> uu: that (p -> q) {move 1}



declare vv that q->p

>> vv: that (q -> p) {move 1}



define fixprop p pp : pp

>> fixprop: [(p_1:prop),(pp_1:that p_1) => (pp_1:
>>      that p_1)]
>>   {move 0}



define Biconditional uu vv : fixprop (p<->q, \
   Conjunction uu vv)

>> Biconditional: [(.p_1:prop),(.q_1:prop),(uu_1:
>>      that (.p_1 -> .q_1)),(vv_1:that (.q_1
>>      -> .p_1)) => (((.p_1 <-> .q_1) fixprop
>>      (uu_1 Conjunction vv_1)):that (.p_1 <->
>>      .q_1))]
>>   {move 0}



declare r prop

>> r: prop {move 1}



open

   declare line1 that (p & q) -> r

>>    line1: that ((p & q) -> r) {move 2}



   open

      declare line2 that p

>>       line2: that p {move 3}



      open

         declare line3 that q

>>          line3: that q {move 4}



         define line4 line3 : Conjunction \
            line2 line3

>>          line4: [(line3_1:that q) => (---:
>>               that (p & q))]
>>            {move 3}



         define line5 line3 : Mp (line4 line3, \
            line1)

>>          line5: [(line3_1:that q) => (---:
>>               that r)]
>>            {move 3}



         close

      define line6 line2 : Deduction line5


>>       line6: [(line2_1:that p) => (---:that
>>            (q -> r))]
>>         {move 2}



      close

   define line7 line1 : Deduction line6

>>    line7: [(line1_1:that ((p & q) -> r))
>>         => (---:that (p -> (q -> r)))]
>>      {move 1}



   close

define Part1 p q r: Deduction line7

>> Part1: [(p_1:prop),(q_1:prop),(r_1:prop)
>>      => (Deduction([(line1_2:that ((p_1 & q_1)
>>         -> r_1)) => (Deduction([(line2_3:that
>>            p_1) => (Deduction([(line3_4:that
>>               q_1) => (((line2_3 Conjunction
>>               line3_4) Mp line1_2):that r_1)])
>>            :that (q_1 -> r_1))])
>>         :that (p_1 -> (q_1 -> r_1)))])
>>      :that (((p_1 & q_1) -> r_1) -> (p_1 ->
>>      (q_1 -> r_1))))]
>>   {move 0}



open

   declare line8 that p -> (q -> r)

>>    line8: that (p -> (q -> r)) {move 2}



   open

      declare line9 that p&q

>>       line9: that (p & q) {move 3}



      define line10 line9 : Simplification1 \
         line9

>>       line10: [(line9_1:that (p & q)) =>
>>            (---:that p)]
>>         {move 2}



      define line11 line9 : Mp (line10 line9, \
         line8)

>>       line11: [(line9_1:that (p & q)) =>
>>            (---:that (q -> r))]
>>         {move 2}



      define line12 line9 : Simplification2 \
         line9

>>       line12: [(line9_1:that (p & q)) =>
>>            (---:that q)]
>>         {move 2}



      define line13 line9 : Mp (line12 line9, \
         line11 line9)

>>       line13: [(line9_1:that (p & q)) =>
>>            (---:that r)]
>>         {move 2}



      close

   define line14 line8 : Deduction line13


>>    line14: [(line8_1:that (p -> (q -> r)))
>>         => (---:that ((p & q) -> r))]
>>      {move 1}



   close

define Part2 p q r : Deduction line14

>> Part2: [(p_1:prop),(q_1:prop),(r_1:prop)
>>      => (Deduction([(line8_2:that (p_1 -> (q_1
>>         -> r_1))) => (Deduction([(line9_3:that
>>            (p_1 & q_1)) => ((Simplification2(line9_3)
>>            Mp (Simplification1(line9_3) Mp
>>            line8_2)):that r_1)])
>>         :that ((p_1 & q_1) -> r_1))])
>>      :that ((p_1 -> (q_1 -> r_1)) -> ((p_1
>>      & q_1) -> r_1)))]
>>   {move 0}



define Export p q r : Biconditional (Part1 \
   p q r,Part2 p q r)

>> Export: [(p_1:prop),(q_1:prop),(r_1:prop)
>>      => ((Part1(p_1,q_1,r_1) Biconditional
>>      Part2(p_1,q_1,r_1)):that (((p_1 & q_1)
>>      -> r_1) <-> (p_1 -> (q_1 -> r_1))))]
>>   {move 0}



postulate ?? prop

>> ??: prop {move 0}



define ~ p : p -> ??

>> ~: [(p_1:prop) => ((p_1 -> ??):prop)]
>>   {move 0}



declare maybe that ~ ~ p

>> maybe: that ~(~(p)) {move 1}



postulate Dneg maybe that p

>> Dneg: [(.p_1:prop),(maybe_1:that ~(~(.p_1)))
>>      => (---:that .p_1)]
>>   {move 0}



open

   declare pp1 that p

>>    pp1: that p {move 2}



   postulate Negded pp1 that ??

>>    Negded: [(pp1_1:that p) => (---:that ??)]
>>      {move 1}



   close

define Negproof Negded : fixprop (~p,Deduction \
   Negded)

>> Negproof: [(.p_1:prop),(Negded_1:[(pp1_2:
>>         that .p_1) => (---:that ??)])
>>      => ((~(.p_1) fixprop Deduction(Negded_1)):
>>      that ~(.p_1))]
>>   {move 0}



define v p q : ~p -> q

>> v: [(p_1:prop),(q_1:prop) => ((~(p_1) ->
>>      q_1):prop)]
>>   {move 0}



declare indev that ~q -> ~p

>> indev: that (~(q) -> ~(p)) {move 1}



open

   declare pp1 that p

>>    pp1: that p {move 2}



   open

      declare notq that ~q

>>       notq: that ~(q) {move 3}



      define line1 notq : Mp notq indev

>>       line1: [(notq_1:that ~(q)) => (---:
>>            that ~(p))]
>>         {move 2}



      define line2 notq : Mp (pp1, line1 \
         notq)

>>       line2: [(notq_1:that ~(q)) => (---:
>>            that ??)]
>>         {move 2}



      close

   define qq1 pp1 : Negproof line2

>>    qq1: [(pp1_1:that p) => (---:that ~(~(q)))]
>>      {move 1}



   define qq2 pp1: Dneg qq1 pp1

>>    qq2: [(pp1_1:that p) => (---:that q)]
>>      {move 1}



   close

define Contrapositive indev : Deduction qq2


>> Contrapositive: [(.q_1:prop),(.p_1:prop),
>>      (indev_1:that (~(.q_1) -> ~(.p_1))) =>
>>      (Deduction([(pp1_2:that .p_1) => (Dneg(Negproof([(notq_3:
>>            that ~(.q_1)) => ((pp1_2 Mp (notq_3
>>            Mp indev_1)):that ??)]))
>>         :that .q_1)])
>>      :that (.p_1 -> .q_1))]
>>   {move 0}



open

   declare notp that ~p

>>    notp: that ~(p) {move 2}



   postulate excalt1 notp that q

>>    excalt1: [(notp_1:that ~(p)) => (---:that
>>         q)]
>>      {move 1}



   close

define Orproof1 excalt1 : fixprop (p v q, \
   Deduction excalt1)

>> Orproof1: [(.p_1:prop),(.q_1:prop),(excalt1_1:
>>      [(notp_2:that ~(.p_1)) => (---:that .q_1)])
>>      => (((.p_1 v .q_1) fixprop Deduction(excalt1_1)):
>>      that (.p_1 v .q_1))]
>>   {move 0}



open

   declare notp that ~p

>>    notp: that ~(p) {move 2}



   define dneg2 notp : Mp pp notp

>>    dneg2: [(notp_1:that ~(p)) => (---:that
>>         ??)]
>>      {move 1}



   close

define Dneg2 pp : fixprop (~ ~p,Deduction \
   dneg2)

>> Dneg2: [(.p_1:prop),(pp_1:that .p_1) => ((~(~(.p_1))
>>      fixprop Deduction([(notp_2:that ~(.p_1))
>>         => ((pp_1 Mp notp_2):that ??)]))
>>      :that ~(~(.p_1)))]
>>   {move 0}



open

   declare notq that ~q

>>    notq: that ~(q) {move 2}



   postulate excalt2 notq that p

>>    excalt2: [(notq_1:that ~(q)) => (---:that
>>         p)]
>>      {move 1}



   define line1 notq : Dneg2 excalt2 notq


>>    line1: [(notq_1:that ~(q)) => (---:that
>>         ~(~(p)))]
>>      {move 1}



   close

define Orproof2 excalt2: fixprop(p v q,Contrapositive \
   (Deduction line1))

>> Orproof2: [(.q_1:prop),(.p_1:prop),(excalt2_1:
>>      [(notq_2:that ~(.q_1)) => (---:that .p_1)])
>>      => (((.p_1 v .q_1) fixprop Contrapositive(Deduction([(notq_3:
>>         that ~(.q_1)) => (Dneg2(excalt2_1(notq_3)):
>>         that ~(~(.p_1)))]))
>>      ):that (.p_1 v .q_1))]
>>   {move 0}



open

   declare notq that ~q

>>    notq: that ~(q) {move 2}



   define ppconst notq : pp

>>    ppconst: [(notq_1:that ~(q)) => (---:that
>>         p)]
>>      {move 1}



   close

define Addition1 q pp : Orproof2 ppconst


>> Addition1: [(q_1:prop),(.p_1:prop),(pp_1:
>>      that .p_1) => (Orproof2([(notq_2:that
>>         ~(q_1)) => (pp_1:that .p_1)])
>>      :that (.p_1 v q_1))]
>>   {move 0}



open

   declare notp that ~p

>>    notp: that ~(p) {move 2}



   define qqconst notp : qq

>>    qqconst: [(notp_1:that ~(p)) => (---:that
>>         q)]
>>      {move 1}



   close

define Addition2 p qq : Orproof1 qqconst


>> Addition2: [(p_1:prop),(.q_1:prop),(qq_1:
>>      that .q_1) => (Orproof1([(notp_2:that
>>         ~(p_1)) => (qq_1:that .q_1)])
>>      :that (p_1 v .q_1))]
>>   {move 0}



open

   declare notq that ~q

>>    notq: that ~(q) {move 2}



   open

      declare pp1 that p

>>       pp1: that p {move 3}



      define line3 pp1 : Mp pp1 ss

>>       line3: [(pp1_1:that p) => (---:that
>>            q)]
>>         {move 2}



      define line4 pp1 : Mp (line3 pp1,notq)


>>       line4: [(pp1_1:that p) => (---:that
>>            ??)]
>>         {move 2}



      close

   define pcantbe notq : Negproof line4

>>    pcantbe: [(notq_1:that ~(q)) => (---:that
>>         ~(p))]
>>      {move 1}



   close

define Contrapositive2 ss : Deduction pcantbe


>> Contrapositive2: [(.p_1:prop),(.q_1:prop),
>>      (ss_1:that (.p_1 -> .q_1)) => (Deduction([(notq_2:
>>         that ~(.q_1)) => (Negproof([(pp1_3:
>>            that .p_1) => (((pp1_3 Mp ss_1)
>>            Mp notq_2):that ??)])
>>         :that ~(.p_1))])
>>      :that (~(.q_1) -> ~(.p_1)))]
>>   {move 0}



declare ss2 that q -> r

>> ss2: that (q -> r) {move 1}



open

   declare pp1 that p

>>    pp1: that p {move 2}



   define line5 pp1 : Mp pp1 ss

>>    line5: [(pp1_1:that p) => (---:that q)]
>>      {move 1}



   define line6 pp1 : Mp (line5 pp1,ss2)


>>    line6: [(pp1_1:that p) => (---:that r)]
>>      {move 1}



   close

define Transimp ss ss2: Deduction line6

>> Transimp: [(.p_1:prop),(.q_1:prop),(ss_1:
>>      that (.p_1 -> .q_1)),(.r_1:prop),(ss2_1:
>>      that (.q_1 -> .r_1)) => (Deduction([(pp1_2:
>>         that .p_1) => (((pp1_2 Mp ss_1) Mp
>>         ss2_1):that .r_1)])
>>      :that (.p_1 -> .r_1))]
>>   {move 0}



declare alts that p v q

>> alts: that (p v q) {move 1}



declare case1 that p -> r

>> case1: that (p -> r) {move 1}



declare case2 that q -> r

>> case2: that (q -> r) {move 1}



open

   declare notr that ~r

>>    notr: that ~(r) {move 2}



   define linea7 : Contrapositive2 case1


>>    linea7: [(---:that (~(r) -> ~(p)))]
>>      {move 1}



   define line8 notr : Mp notr linea7

>>    line8: [(notr_1:that ~(r)) => (---:that
>>         ~(p))]
>>      {move 1}



   define line9 notr : Mp (line8 notr, alts)


>>    line9: [(notr_1:that ~(r)) => (---:that
>>         q)]
>>      {move 1}



   define line10 notr : Mp (line9 notr, case2)


>>    line10: [(notr_1:that ~(r)) => (---:that
>>         r)]
>>      {move 1}



   define line11 notr : Mp (line10 notr, \
      notr)

>>    line11: [(notr_1:that ~(r)) => (---:that
>>         ??)]
>>      {move 1}



   close

define Cases alts case1 case2 : Dneg (Negproof \
   line11)

>> Cases: [(.p_1:prop),(.q_1:prop),(alts_1:that
>>      (.p_1 v .q_1)),(.r_1:prop),(case1_1:that
>>      (.p_1 -> .r_1)),(case2_1:that (.q_1 ->
>>      .r_1)) => (Dneg(Negproof([(notr_2:that
>>         ~(.r_1)) => (((((notr_2 Mp Contrapositive2(case1_1))
>>         Mp alts_1) Mp case2_1) Mp notr_2):that
>>         ??)]))
>>      :that .r_1)]
>>   {move 0}



declare ppx that ~p

>> ppx: that ~(p) {move 1}



define Ds1 alts ppx : Mp ppx alts

>> Ds1: [(.p_1:prop),(.q_1:prop),(alts_1:that
>>      (.p_1 v .q_1)),(ppx_1:that ~(.p_1)) =>
>>      ((ppx_1 Mp alts_1):that .q_1)]
>>   {move 0}



declare qqx that ~q

>> qqx: that ~(q) {move 1}



define Ds2 alts qqx : Dneg (Mp (qqx,Contrapositive2 \
   alts))

>> Ds2: [(.p_1:prop),(.q_1:prop),(alts_1:that
>>      (.p_1 v .q_1)),(qqx_1:that ~(.q_1)) =>
>>      (Dneg((qqx_1 Mp Contrapositive2(alts_1))):
>>      that .p_1)]
>>   {move 0}



declare tau type

>> tau: type {move 1}



declare x in tau

>> x: in tau {move 1}



declare y in tau

>> y: in tau {move 1}



postulate = x y : prop

>> =: [(.tau_1:type),(x_1:in .tau_1),(y_1:in
>>      .tau_1) => (---:prop)]
>>   {move 0}



postulate Refleq x that x =x

>> Refleq: [(.tau_1:type),(x_1:in .tau_1) =>
>>      (---:that (x_1 = x_1))]
>>   {move 0}



open

   declare x1 in tau

>>    x1: in tau {move 2}



   postulate Pred x1 : prop

>>    Pred: [(x1_1:in tau) => (---:prop)]
>>      {move 1}



   close

declare eqev that x =y

>> eqev: that (x = y) {move 1}



declare subsev that Pred x

>> subsev: that Pred(x) {move 1}



postulate Substitution Pred, eqev subsev \
   : that Pred y

>> Substitution: [(.tau_1:type),(Pred_1:[(x1_2:
>>         in .tau_1) => (---:prop)]),
>>      (.x_1:in .tau_1),(.y_1:in .tau_1),(eqev_1:
>>      that (.x_1 = .y_1)),(subsev_1:that Pred_1(.x_1))
>>      => (---:that Pred_1(.y_1))]
>>   {move 0}



open

   declare y1 in tau

>>    y1: in tau {move 2}



   define sympred y1 : y1 = x

>>    sympred: [(y1_1:in tau) => (---:prop)]
>>      {move 1}



   close

define Symmeq eqev:Substitution(sympred,eqev, \
   Refleq x)

>> Symmeq: [(.tau_1:type),(.x_1:in .tau_1),(.y_1:
>>      in .tau_1),(eqev_1:that (.x_1 = .y_1))
>>      => (Substitution([(y1_2:in .tau_1) =>
>>         ((y1_2 = .x_1):prop)]
>>      ,eqev_1,Refleq(.x_1)):that (.y_1 = .x_1))]
>>   {move 0}



declare z in tau

>> z: in tau {move 1}



declare eqev2 that y =z

>> eqev2: that (y = z) {move 1}



open

   declare x1 in tau

>>    x1: in tau {move 2}



   define transpred x1 : x1 = z

>>    transpred: [(x1_1:in tau) => (---:prop)]
>>      {move 1}



   close

define Transeq eqev eqev2 : Substitution(transpred, \
   Symmeq eqev,eqev2)

>> Transeq: [(.tau_1:type),(.x_1:in .tau_1),
>>      (.y_1:in .tau_1),(eqev_1:that (.x_1 =
>>      .y_1)),(.z_1:in .tau_1),(eqev2_1:that
>>      (.y_1 = .z_1)) => (Substitution([(x1_2:
>>         in .tau_1) => ((x1_2 = .z_1):prop)]
>>      ,Symmeq(eqev_1),eqev2_1):that (.x_1 =
>>      .z_1))]
>>   {move 0}



postulate Forallx Pred : prop

>> Forallx: [(.tau_1:type),(Pred_1:[(x1_2:in
>>         .tau_1) => (---:prop)])
>>      => (---:prop)]
>>   {move 0}



open

   declare x1 in tau

>>    x1: in tau {move 2}



   define Notpred x1 : ~ Pred x1

>>    Notpred: [(x1_1:in tau) => (---:prop)]
>>      {move 1}



   close

declare x17 in tau

>> x17: in tau {move 1}



define Negatepred Pred, x17 : ~ (Pred x17)


>> Negatepred: [(.tau_1:type),(Pred_1:[(x1_2:
>>         in .tau_1) => (---:prop)]),
>>      (x17_1:in .tau_1) => (~(Pred_1(x17_1)):
>>      prop)]
>>   {move 0}



open

   declare x18 in tau

>>    x18: in tau {move 2}



   define selfeq x18:x18 =x18

>>    selfeq: [(x18_1:in tau) => (---:prop)]
>>      {move 1}



   close

define sillytest tau x : Negatepred selfeq, \
   x

>> sillytest: [(tau_1:type),(x_1:in tau_1) =>
>>      (Negatepred([(x18_2:in tau_1) => ((x18_2
>>         = x18_2):prop)]
>>      ,x_1):prop)]
>>   {move 0}



define Existsx Pred: ~ Forallx (Negatepred \
   (Pred))

>> Existsx: [(.tau_1:type),(Pred_1:[(x1_2:in
>>         .tau_1) => (---:prop)])
>>      => (~(Forallx([(x17_3:in .tau_1) => (Negatepred(Pred_1,
>>         x17_3):prop)]))
>>      :prop)]
>>   {move 0}



declare univev that Forallx Pred

>> univev: that Forallx(Pred) {move 1}



declare u in tau

>> u: in tau {move 1}



postulate Uix univev, u : that Pred u

>> Uix: [(.tau_1:type),(.Pred_1:[(x1_2:in .tau_1)
>>         => (---:prop)]),
>>      (univev_1:that Forallx(.Pred_1)),(u_1:
>>      in .tau_1) => (---:that .Pred_1(u_1))]
>>   {move 0}



open

   declare x1 in tau

>>    x1: in tau {move 2}



   postulate univ x1 that Pred x1

>>    univ: [(x1_1:in tau) => (---:that Pred(x1_1))]
>>      {move 1}



   close

postulate Ugx univ : that Forallx Pred

>> Ugx: [(.tau_1:type),(.Pred_1:[(x1_2:in .tau_1)
>>         => (---:prop)]),
>>      (univ_1:[(x1_3:in .tau_1) => (---:that
>>         .Pred_1(x1_3))])
>>      => (---:that Forallx(.Pred_1))]
>>   {move 0}



open

   declare x1 in tau

>>    x1: in tau {move 2}



   define selfproof x1 : Refleq x1

>>    selfproof: [(x1_1:in tau) => (---:that
>>         (x1_1 = x1_1))]
>>      {move 1}



   close

define Univexample tau: Ugx selfproof

>> Univexample: [(tau_1:type) => (Ugx([(x1_3:
>>         in tau_1) => (Refleq(x1_3):that (x1_3
>>         = x1_3))])
>>      :that Forallx([(x1_4:in tau_1) => ((x1_4
>>         = x1_4):prop)]))
>>      ]
>>   {move 0}



declare xx in tau

>> xx: in tau {move 1}



declare predev that Pred xx

>> predev: that Pred(xx) {move 1}



open

   declare line15 that Forallx Notpred

>>    line15: that Forallx(Notpred) {move 2}



   define line16 line15 : Uix line15,xx

>>    line16: [(line15_1:that Forallx(Notpred))
>>         => (---:that Notpred(xx))]
>>      {move 1}



   define line17 line15 : Mp predev, line16 \
      line15

>>    line17: [(line15_1:that Forallx(Notpred))
>>         => (---:that ??)]
>>      {move 1}



   close

define Ei Pred, predev : fixprop (Existsx \
   Pred,Negproof line17)

>> Ei: [(.tau_1:type),(Pred_1:[(x1_2:in .tau_1)
>>         => (---:prop)]),
>>      (.xx_1:in .tau_1),(predev_1:that Pred_1(.xx_1))
>>      => ((Existsx(Pred_1) fixprop Negproof([(line15_4:
>>         that Forallx([(x1_5:in .tau_1) => (~(Pred_1(x1_5)):
>>            prop)]))
>>         => ((predev_1 Mp (line15_4 Uix .xx_1)):
>>         that ??)]))
>>      :that Existsx(Pred_1))]
>>   {move 0}



define Ei2 xx predev : fixprop (Existsx Pred, \
   Negproof line17)

>> Ei2: [(.tau_1:type),(xx_1:in .tau_1),(.Pred_1:
>>      [(x1_2:in .tau_1) => (---:prop)]),
>>      (predev_1:that .Pred_1(xx_1)) => ((Existsx(.Pred_1)
>>      fixprop Negproof([(line15_4:that Forallx([(x1_5:
>>            in .tau_1) => (~(.Pred_1(x1_5)):
>>            prop)]))
>>         => ((predev_1 Mp (line15_4 Uix xx_1)):
>>         that ??)]))
>>      :that Existsx(.Pred_1))]
>>   {move 0}



define Eiexample2 x : Ei2 x Refleq x

>> Eiexample2: [(.tau_1:type),(x_1:in .tau_1)
>>      => ((x_1 Ei2 Refleq(x_1)):that Existsx([(x1_3:
>>         in .tau_1) => ((x1_3 = x1_3):prop)]))
>>      ]
>>   {move 0}



declare existsev that Existsx Pred

>> existsev: that Existsx(Pred) {move 1}



declare wgoal prop

>> wgoal: prop {move 1}



open

   declare w1 in tau

>>    w1: in tau {move 2}



   declare exev that Pred w1

>>    exev: that Pred(w1) {move 2}



   postulate wproof exev that wgoal

>>    wproof: [(.w1_1:in tau),(exev_1:that Pred(.w1_1))
>>         => (---:that wgoal)]
>>      {move 1}



   declare notwgoal that ~ wgoal

>>    notwgoal: that ~(wgoal) {move 2}



   open

      declare w2 in tau

>>       w2: in tau {move 3}



      open

         declare exev2 that Pred w2

>>          exev2: that Pred(w2) {move 4}



         define line25 exev2 : wproof exev2


>>          line25: [(exev2_1:that Pred(w2))
>>               => (---:that wgoal)]
>>            {move 3}



         define line26 exev2 : Mp (line25 \
            exev2, notwgoal)

>>          line26: [(exev2_1:that Pred(w2))
>>               => (---:that ??)]
>>            {move 3}



         close

      define line27 w2 : Negproof line26


>>       line27: [(w2_1:in tau) => (---:that
>>            ~(Pred(w2_1)))]
>>         {move 2}



      close

   define line28 notwgoal : Ugx line27

>>    line28: [(notwgoal_1:that ~(wgoal)) =>
>>         (---:that Forallx([(w2_5:in tau) =>
>>            (~(Pred(w2_5)):prop)]))
>>         ]
>>      {move 1}



   define line29 notwgoal : Mp (line28 notwgoal, \
      existsev)

>>    line29: [(notwgoal_1:that ~(wgoal)) =>
>>         (---:that ??)]
>>      {move 1}



   close

define Witness existsev wproof : Dneg(Negproof \
   line29)

>> Witness: [(.tau_1:type),(.Pred_1:[(x1_2:in
>>         .tau_1) => (---:prop)]),
>>      (existsev_1:that Existsx(.Pred_1)),(.wgoal_1:
>>      prop),(wproof_1:[(.w1_3:in .tau_1),(exev_3:
>>         that .Pred_1(.w1_3)) => (---:that .wgoal_1)])
>>      => (Dneg(Negproof([(notwgoal_4:that ~(.wgoal_1))
>>         => ((Ugx([(w2_7:in .tau_1) => (Negproof([(exev2_8:
>>               that .Pred_1(w2_7)) => (((w2_7
>>               wproof_1 exev2_8) Mp notwgoal_4):
>>               that ??)])
>>            :that ~(.Pred_1(w2_7)))])
>>         Mp existsev_1):that ??)]))
>>      :that .wgoal_1)]
>>   {move 0}



open

   declare w1 in tau

>>    w1: in tau {move 2}



   define Testpred w1 : (Pred w1) & Pred \
      w1

>>    Testpred: [(w1_1:in tau) => (---:prop)]
>>      {move 1}



   declare exev that Pred w1

>>    exev: that Pred(w1) {move 2}



   define test exev: Conjunction exev exev


>>    test: [(.w1_1:in tau),(exev_1:that Pred(.w1_1))
>>         => (---:that (Pred(.w1_1) & Pred(.w1_1)))]
>>      {move 1}



   define zorch exev : Ei (Testpred, test \
      exev)

>>    zorch: [(.w1_1:in tau),(exev_1:that Pred(.w1_1))
>>         => (---:that Existsx(Testpred))]
>>      {move 1}



   close

define Witnesstest existsev : Witness(existsev, \
   zorch)

>> Witnesstest: [(.tau_1:type),(.Pred_1:[(x1_2:
>>         in .tau_1) => (---:prop)]),
>>      (existsev_1:that Existsx(.Pred_1)) =>
>>      ((existsev_1 Witness [(.w1_4:in .tau_1),
>>         (exev_4:that .Pred_1(.w1_4)) => (Ei([(w1_5:
>>            in .tau_1) => ((.Pred_1(w1_5) &
>>            .Pred_1(w1_5)):prop)]
>>         ,(exev_4 Conjunction exev_4)):that
>>         Existsx([(w1_6:in .tau_1) => ((.Pred_1(w1_6)
>>            & .Pred_1(w1_6)):prop)]))
>>         ])
>>      :that Existsx([(w1_7:in .tau_1) => ((.Pred_1(w1_7)
>>         & .Pred_1(w1_7)):prop)]))
>>      ]
>>   {move 0}



open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   postulate Predn n1 : prop

>>    Predn: [(n1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   declare indhyp that Predn n1

>>    indhyp: that Predn(n1) {move 2}



   postulate indstep indhyp that Predn Succ \
      n1

>>    indstep: [(.n1_1:in Nat),(indhyp_1:that
>>         Predn(.n1_1)) => (---:that Predn(Succ(.n1_1)))]
>>      {move 1}



   close

declare basis that Predn 1

>> basis: that Predn(1) {move 1}



declare k in Nat

>> k: in Nat {move 1}



postulate Induction indstep, basis, k : that \
   Predn k

>> Induction: [(.Predn_1:[(n1_2:in Nat) => (---:
>>         prop)]),
>>      (indstep_1:[(.n1_3:in Nat),(indhyp_3:that
>>         .Predn_1(.n1_3)) => (---:that .Predn_1(Succ(.n1_3)))]),
>>      (basis_1:that .Predn_1(1)),(k_1:in Nat)
>>      => (---:that .Predn_1(k_1))]
>>   {move 0}



open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   postulate typefun n1 : type

>>    typefun: [(n1_1:in Nat) => (---:type)]
>>      {move 1}



   close

open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   declare m1 in typefun n1

>>    m1: in typefun(n1) {move 2}



   postulate repeatfun n1 m1 in typefun Succ \
      n1

>>    repeatfun: [(n1_1:in Nat),(m1_1:in typefun(n1_1))
>>         => (---:in typefun(Succ(n1_1)))]
>>      {move 1}



   close

declare initval in typefun 1

>> initval: in typefun(1) {move 1}



declare K in Nat

>> K: in Nat {move 1}



postulate Iter repeatfun, initval, K : in \
   typefun K

>> Iter: [(.typefun_1:[(n1_2:in Nat) => (---:
>>         type)]),
>>      (repeatfun_1:[(n1_3:in Nat),(m1_3:in .typefun_1(n1_3))
>>         => (---:in .typefun_1(Succ(n1_3)))]),
>>      (initval_1:in .typefun_1(1)),(K_1:in Nat)
>>      => (---:in .typefun_1(K_1))]
>>   {move 0}



postulate Iterinit repeatfun, initval : that \
   (Iter repeatfun, initval, 1) = initval

>> Iterinit: [(.typefun_1:[(n1_2:in Nat) =>
>>         (---:type)]),
>>      (repeatfun_1:[(n1_3:in Nat),(m1_3:in .typefun_1(n1_3))
>>         => (---:in .typefun_1(Succ(n1_3)))]),
>>      (initval_1:in .typefun_1(1)) => (---:that
>>      (Iter(repeatfun_1,initval_1,1) = initval_1))]
>>   {move 0}



postulate Iternext repeatfun, initval, K \
   : that (Iter repeatfun, initval, Succ K) \
   = repeatfun K (Iter repeatfun, initval K)


>> Iternext: [(.typefun_1:[(n1_2:in Nat) =>
>>         (---:type)]),
>>      (repeatfun_1:[(n1_3:in Nat),(m1_3:in .typefun_1(n1_3))
>>         => (---:in .typefun_1(Succ(n1_3)))]),
>>      (initval_1:in .typefun_1(1)),(K_1:in Nat)
>>      => (---:that (Iter(repeatfun_1,initval_1,
>>      Succ(K_1)) = (K_1 repeatfun_1 Iter(repeatfun_1,
>>      initval_1,K_1))))]
>>   {move 0}



define oneisone : Refleq 1

>> oneisone: [(Refleq(1):that (1 = 1))]
>>   {move 0}



open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   open

      declare m1 in Nat

>>       m1: in Nat {move 3}



      define ispred m1: n1 = Succ m1

>>       ispred: [(m1_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   define Haspred n1: Existsx ispred

>>    Haspred: [(n1_1:in Nat) => (---:prop)]
>>      {move 1}



   close

define basisexample : Addition1 (Haspred \
   1, oneisone)

>> basisexample: [((Existsx([(m1_1:in Nat) =>
>>         ((1 = Succ(m1_1)):prop)])
>>      Addition1 oneisone):that ((1 = 1) v Existsx([(m1_2:
>>         in Nat) => ((1 = Succ(m1_2)):prop)]))
>>      )]
>>   {move 0}



open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   declare indhypexample that (n1 = 1) v \
      (Haspred n1)

>>    indhypexample: that ((n1 = 1) v Haspred(n1))
>>      {move 2}



   define line37 n1: Refleq Succ n1

>>    line37: [(n1_1:in Nat) => (---:that (Succ(n1_1)
>>         = Succ(n1_1)))]
>>      {move 1}



   open

      declare m1 in Nat

>>       m1: in Nat {move 3}



      define ispred2 m1 : Succ n1 = Succ \
         m1

>>       ispred2: [(m1_1:in Nat) => (---:prop)]
>>         {move 2}



      close

   define line38 n1: fixprop(Haspred Succ \
      n1,Ei ispred2, line37 n1)

>>    line38: [(n1_1:in Nat) => (---:that Haspred(Succ(n1_1)))]
>>      {move 1}



   define line39 indhypexample: Addition2(Succ \
      n1 = 1,line38 n1)

>>    line39: [(.n1_1:in Nat),(indhypexample_1:
>>         that ((.n1_1 = 1) v Haspred(.n1_1)))
>>         => (---:that ((Succ(.n1_1) = 1) v Haspred(Succ(.n1_1))))]
>>      {move 1}



   close

define Inductionexample K:Induction line39, \
   basisexample K

>> Inductionexample: [(K_1:in Nat) => (Induction([(.n1_4:
>>         in Nat),(indhypexample_4:that ((.n1_4
>>         = 1) v Existsx([(m1_5:in Nat) => ((.n1_4
>>            = Succ(m1_5)):prop)]))
>>         ) => (((Succ(.n1_4) = 1) Addition2
>>         (Existsx([(m1_7:in Nat) => ((Succ(.n1_4)
>>            = Succ(m1_7)):prop)])
>>         fixprop Ei([(m1_8:in Nat) => ((Succ(.n1_4)
>>            = Succ(m1_8)):prop)]
>>         ,Refleq(Succ(.n1_4))))):that ((Succ(.n1_4)
>>         = 1) v Existsx([(m1_9:in Nat) => ((Succ(.n1_4)
>>            = Succ(m1_9)):prop)]))
>>         )]
>>      ,basisexample,K_1):that ((K_1 = 1) v Existsx([(m1_10:
>>         in Nat) => ((K_1 = Succ(m1_10)):prop)]))
>>      )]
>>   {move 0}



open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   declare t1 in tau

>>    t1: in tau {move 2}



   postulate f1 t1 : in tau

>>    f1: [(t1_1:in tau) => (---:in tau)]
>>      {move 1}



   define f2 n1 t1 : f1 t1

>>    f2: [(n1_1:in Nat),(t1_1:in tau) => (---:
>>         in tau)]
>>      {move 1}



   close

declare tinit in tau

>> tinit: in tau {move 1}



declare nt in Nat

>> nt: in Nat {move 1}



define iter f1, tinit nt : Iter f2, tinit \
   Succ nt

>> iter: [(.tau_1:type),(f1_1:[(t1_2:in .tau_1)
>>         => (---:in .tau_1)]),
>>      (tinit_1:in .tau_1),(nt_1:in Nat) => (Iter([(n1_4:
>>         in Nat),(t1_4:in .tau_1) => (f1_1(t1_4):
>>         in .tau_1)]
>>      ,tinit_1,Succ(nt_1)):in .tau_1)]
>>   {move 0}



define ++ n m : iter Succ, n m

>> ++: [(n_1:in Nat),(m_1:in Nat) => (iter(Succ,
>>      n_1,m_1):in Nat)]
>>   {move 0}



open

   declare k1 in Nat

>>    k1: in Nat {move 2}



   declare k2 in Nat

>>    k2: in Nat {move 2}



   define Addn k1 k2: k2++n

>>    Addn: [(k1_1:in Nat),(k2_1:in Nat) =>
>>         (---:in Nat)]
>>      {move 1}



   close

open

   declare n1 in Nat

>>    n1: in Nat {move 2}



   declare m1 in Nat

>>    m1: in Nat {move 2}



   declare nt1 in Nat

>>    nt1: in Nat {move 2}



   define Add3 n1 m1 nt1 : nt1++n1

>>    Add3: [(n1_1:in Nat),(m1_1:in Nat),(nt1_1:
>>         in Nat) => (---:in Nat)]
>>      {move 1}



   close

define ** n m : Iter ((Add3(n)), n, m)

>> **: [(n_1:in Nat),(m_1:in Nat) => (Iter([(m1_3:
>>         in Nat),(nt1_3:in Nat) => ((nt1_3 ++
>>         n_1):in Nat)]
>>      ,n_1,m_1):in Nat)]
>>   {move 0}



>> Inspector Lestrade says:  Done reading scratch to discretemath:
>>  type lines or type quit to exit interface

quit


