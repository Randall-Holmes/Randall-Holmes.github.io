
>> Inspector Lestrade says:  
>> Welcome to the Lestrade Type Inspector,
>>  
>> User entered lambda terms (arguments)
>> and function sorts (in declare)!
>> literate programming with LaTeX comments in ML source
>> version of  8/11/2019
>>  9:30 am Boise time



declare p prop

>> p: prop {move 1}



declare q prop

>> q: prop {move 1}



declare pp that p

>> pp: that p {move 1}



declare qq that q

>> qq: that q {move 1}



postulate & p q prop

>> &: [(p_1:prop),(q_1:prop) => (---:prop)]
>>   {move 0}



postulate Conj pp qq that p & q

>> Conj: [(.p_1:prop),(pp_1:that .p_1),(.q_1:
>>      prop),(qq_1:that .q_1) => (---:that (.p_1
>>      & .q_1))]
>>   {move 0}



declare pp2 that p

>> pp2: that p {move 1}



define sameprops pp pp2: Conj pp pp2

>> sameprops: [(.p_1:prop),(pp_1:that .p_1),
>>      (pp2_1:that .p_1) => ((pp_1 Conj pp2_1):
>>      that (.p_1 & .p_1))]
>>   {move 0}



ddefine prflt pp that p

>> prflt: [(.p_1:prop),(pp_1:that .p_1) => (+++:
>>      that .p_1)]
>>   {move 0}



postulate identified pp prop

>> identified: [(.p_1:prop),(pp_1:that .p_1)
>>      => (---:prop)]
>>   {move 0}



postulate alwaysidentified pp that identified \
   pp

>> alwaysidentified: [(.p_1:prop),(pp_1:that
>>      .p_1) => (---:that identified(pp_1))]
>>   {move 0}



define test pp: sameprops (alwaysidentified \
   pp, alwaysidentified prflt pp)

>> prflt: [(p_1:prop),(pp_1:that p_1) => (pp_1:
>>      that p_1)]
>>   {move 0}



>> test: [(.p_1:prop),(pp_1:that .p_1) => ((alwaysidentified(pp_1)
>>      sameprops alwaysidentified((.p_1 prflt
>>      pp_1))):that (identified(pp_1) & identified(pp_1)))]
>>   {move 0}



>> Inspector Lestrade says:  Done reading ddtest to backups\ddtest_0:
>>  type lines or type quit to exit interface

quit


