



Introduction to logic and testing of the new prover version.

begin Lestrade execution

   >>> versiondate

Welcome to the Lestrade Type Inspector
version of 3/6/2020
6  pm Boise time.


   {move 1}

   >>> comment Starting development \
       of conjunction .


   {move 1}

   >>> declare p prop


   p : prop


   {move 1}

   >>> declare q prop


   q : prop


   {move 1}

   >>> postulate & q p prop


   &: [(p_1 : prop), (q_1 
       : prop) => (--- : prop)]


   {move 0}

   >>> comment Notice that Lestrade \
       fixes the order of the arguments \
       without comment


   {move 1}

   >>> comment We develop the rule \
       of conjunction


   {move 1}

   >>> declare pp that p


   pp : that p


   {move 1}

   >>> declare qq that q


   qq : that q


   {move 1}

   >>> postulate Conj pp qq that \
       p & q


   Conj : [(.p_1 : prop), (.q_1 
       : prop), (pp_1 : that 
       .p_1), (qq_1 : that .q_1) => 
       (--- : that .p_1 & .q_1)]


   {move 0}

   >>> comment here are my first \
       examples, which drove me crazy


   {move 1}

   >>> Declare test0 [pp qq => \
          qq Conj pp]


   test0 : [(pp_1 : that p), (qq_1 
       : that q) => ({def} qq_1 
       Conj pp_1 : that q & p)]


   test0 : [(pp_1 : that p), (qq_1 
       : that q) => (--- : that 
       q & p)]


   {move 1}

   >>> define test1 pp qq : Conj \
       qq pp


   test1 : [(.p_1 : prop), (.q_1 
       : prop), (pp_1 : that 
       .p_1), (qq_1 : that .q_1) => 
       ({def} qq_1 Conj pp_1 
       : that .q_1 & .p_1)]


   test1 : [(.p_1 : prop), (.q_1 
       : prop), (pp_1 : that 
       .p_1), (qq_1 : that .q_1) => 
       (--- : that .q_1 & .p_1)]


   {move 0}

   >>> comment a number of things \
       are being tested here, mostly \
       to do with input and output \
       for an operation with implicit \
       arguments


   {move 1}

   >>> comment Now for the rules \
       of simplification


   {move 1}

   >>> declare rr that p & q


   rr : that p & q


   {move 1}

   >>> postulate Simp1 rr that \
       p


   Simp1 : [(.p_1 : prop), (.q_1 
       : prop), (rr_1 : that 
       .p_1 & .q_1) => (--- : that 
       .p_1)]


   {move 0}

   >>> postulate Simp2 rr that \
       q


   Simp2 : [(.p_1 : prop), (.q_1 
       : prop), (rr_1 : that 
       .p_1 & .q_1) => (--- : that 
       .q_1)]


   {move 0}

   >>> define Conjsymm rr : Conj \
       (Simp2 rr, Simp1 rr)


   Conjsymm : [(.p_1 : prop), (.q_1 
       : prop), (rr_1 : that 
       .p_1 & .q_1) => ({def} Simp2 
       (rr_1) Conj Simp1 (rr_1) : that 
       .q_1 & .p_1)]


   Conjsymm : [(.p_1 : prop), (.q_1 
       : prop), (rr_1 : that 
       .p_1 & .q_1) => (--- : that 
       .q_1 & .p_1)]


   {move 0}

   >>> clearcurrent

{move 1}

   >>> We start the development \
       of implication

{function error}


   {move 1}

   >>> comment We use our ability \
       to clean up the namespace of \
       parameters


   {move 1}

   >>> declare p prop


   p : prop


   {move 1}

   >>> declare q prop


   q : prop


   {move 1}

   >>> postulate -> p q prop


   ->: [(p_1 : prop), (q_1 
       : prop) => (--- : prop)]


   {move 0}

   >>> declare pp that p


   pp : that p


   {move 1}

   >>> declare rr that p -> q


   rr : that p -> q


   {move 1}

   >>> postulate Mp pp rr : that \
       q


   Mp : [(.p_1 : prop), (.q_1 
       : prop), (pp_1 : that 
       .p_1), (rr_1 : that .p_1 
       -> .q_1) => (--- : that 
       .q_1)]


   {move 0}

   >>> comment Mp is the familiar \
       rule of modus ponens


   {move 1}

   >>> declare ded [pp => that \
          q]


   ded : [(pp_1 : that p) => 
       (--- : that q)]


   {move 1}

   >>> postulate Ded ded that p -> \
       q


   Ded : [(.p_1 : prop), (.q_1 
       : prop), (ded_1 : [(pp_2 
          : that .p_1) => (--- 
          : that .q_1)]) => (--- 
       : that .p_1 -> .q_1)]


   {move 0}

   >>> comment Ded is the rule \
       of deduction


   {move 1}

   >>> comment We start with a silly \
       proof


   {move 1}

   >>> define sillytaut p : Ded \
       [pp => pp]


   sillytaut : [(p_1 : prop) => 
       ({def} Ded ([(pp_2 
          : that p_1) => ({def} pp_2 
          : that p_1)]) : that 
       p_1 -> p_1)]


   sillytaut : [(p_1 : prop) => 
       (--- : that p_1 -> p_1)]


   {move 0}

   >>> comment The command above \
       is bugged, it looks like a problem \
       with implicit arguments .I had \
       to fix a problem with parsing \
       of a first function argument \
       .


   {move 1}

   >>> postulate Ded0 p q ded : that \
       p -> q


   Ded0 : [(p_1 : prop), (q_1 
       : prop), (ded_1 : [(pp_2 
          : that p_1) => (--- 
          : that q_1)]) => (--- 
       : that p_1 -> q_1)]


   {move 0}

   >>> define sillytaut2 p : Ded0 \
       p p [pp => pp]


   sillytaut2 : [(p_1 : prop) => 
       ({def} Ded0 (p_1, p_1, [(pp_2 
          : that p_1) => ({def} pp_2 
          : that p_1)]) : that 
       p_1 -> p_1)]


   sillytaut2 : [(p_1 : prop) => 
       (--- : that p_1 -> p_1)]


   {move 0}

   >>> open


      {move 2}

      >>> declare hyp that p & q


      hyp : that p & q


      {move 2}

      >>> define conjsymm hyp : Conjsymm \
          hyp


      conjsymm : [(hyp_1 : that 
          p & q) => ({def} Conjsymm 
          (hyp_1) : that q & p)]


      conjsymm : [(hyp_1 : that 
          p & q) => (--- : that 
          q & p)]


      {move 1}

      >>> close


   {move 1}

   >>> define test3 p q : Ded conjsymm


   test3 : [(p_1 : prop), (q_1 
       : prop), ({let} .conjsymm_1 
       : [(hyp_2 : that p_1 & q_1) => 
          ({def} Conjsymm (hyp_2) : that 
          q_1 & p_1)]) => ({def} Ded 
       (.conjsymm_1) : that (p_1 
       & q_1) -> q_1 & p_1)]


   test3 : [(p_1 : prop), (q_1 
       : prop), ({let} .conjsymm_1 
       : [(hyp_2 : that p_1 & q_1) => 
          ({def} Conjsymm (hyp_2) : that 
          q_1 & p_1)]) => (--- 
       : that (p_1 & q_1) -> q_1 
       & p_1)]


   {move 0}

   >>> declare r prop


   r : prop


   {move 1}

   >>> declare s prop


   s : prop


   {move 1}

   >>> declare t prop


   t : prop


   {move 1}

   >>> define test4 r s t : test3 \
       r (s -> t)


   test4 : [(r_1 : prop), (s_1 
       : prop), (t_1 : prop) => 
       ({def} r_1 test3 s_1 -> 
       t_1 : that (r_1 & s_1 -> 
       t_1) -> (s_1 -> t_1) & r_1)]


   test4 : [(r_1 : prop), (s_1 
       : prop), (t_1 : prop) => 
       (--- : that (r_1 & s_1 
       -> t_1) -> (s_1 -> t_1) & r_1)]


   {move 0}

   >>> comment We start the declaration \
       of equality on untyped objects \
       .

{function error}


   {move 1}

   >>> declare x obj


   x : obj


   {move 1}

   >>> declare y obj


   y : obj


   {move 1}

   >>> postulate = x y prop


   =: [(x_1 : obj), (y_1 : obj) => 
       (--- : prop)]


   {move 0}

   >>> The reflexive law of equality \
       .

{function error}


   {move 1}

   >>> postulate Refl x that x = x


   Refl : [(x_1 : obj) => (--- 
       : that x_1 = x_1)]


   {move 0}

   >>> comment We prepare for the declaration \
       of the substitution property \
       of equality by declaring a variable \
       predicate of objects .

{function error}


   {move 1}

   >>> declare pred [x => prop]


   pred : [(x_1 : obj) => (--- 
       : prop)]


   {move 1}

   >>> .. .and a sample equation \
       between objects

{function error}


   {move 1}

   >>> declare eqev that x = y


   eqev : that x = y


   {move 1}

   >>> .. .and evidence that the \
       predicate holds of one of the \
       objects in the equation

{function error}


   {move 1}

   >>> declare predev that pred \
       x


   predev : that pred (x)


   {move 1}

   >>> comment .. .from which we can deduce \
       that the predicate holds of \
       the other object .Notice the \
       use of implicit arguments .

{function error}


   {move 1}

   >>> postulate Subs eqev predev \
       that pred y


   Subs : [(.x_1 : obj), (.y_1 
       : obj), (.pred_1 : [(x_2 
          : obj) => (--- : prop)]), (eqev_1 
       : that .x_1 = .y_1), (predev_1 
       : that .pred_1 (.x_1)) => 
       (--- : that .pred_1 (.y_1))]


   {move 0}

   >>> declare z obj


   z : obj


   {move 1}

   >>> declare testev that x = z


   testev : that x = z


   {move 1}

   >>> define testeq eqev testev \
       : Subs eqev testev


   testeq : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1), (.z_1 : obj), (testev_1 
       : that .x_1 = .z_1) => ({def} eqev_1 
       Subs testev_1 : that .y_1 
       = .z_1)]


   testeq : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1), (.z_1 : obj), (testev_1 
       : that .x_1 = .z_1) => (--- 
       : that .y_1 = .z_1)]


   {move 0}

   >>> postulate 0 obj


   0 : obj


   {move 0}

   >>> declare testev2 that x = 0


   testev2 : that x = 0


   {move 1}

   >>> define testeq2 eqev testev2 \
       : Subs eqev testev2


   testeq2 : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1), (testev2_1 
       : that .x_1 = 0) => ({def} eqev_1 
       Subs testev2_1 : that .y_1 
       = 0)]


   testeq2 : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1), (testev2_1 
       : that .x_1 = 0) => (--- 
       : that .y_1 = 0)]


   {move 0}

   >>> comment Start proof of symmetric \
       law of equality


   {move 1}

   >>> define Subs0 pred eqev predev \
       : Subs eqev predev


   Subs0 : [(.x_1 : obj), (.y_1 
       : obj), (pred_1 : [(x_2 
          : obj) => (--- : prop)]), (eqev_1 
       : that .x_1 = .y_1), (predev_1 
       : that pred_1 (.x_1)) => 
       ({def} eqev_1 Subs predev_1 
       : that pred_1 (.y_1))]


   Subs0 : [(.x_1 : obj), (.y_1 
       : obj), (pred_1 : [(x_2 
          : obj) => (--- : prop)]), (eqev_1 
       : that .x_1 = .y_1), (predev_1 
       : that pred_1 (.x_1)) => 
       (--- : that pred_1 (.y_1))]


   {move 0}

   >>> comment It is interesting \
       to note that to do this we seem \
       to need an explicit predicate \
       argument .It would be technically \
       interesting to see if this can \
       be cleverly avoided .


   {move 1}

   >>> define Eqsymm eqev : Subs0 \
       [z => z = x] eqev (Refl x)


   Eqsymm : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1) => ({def} Subs0 
       ([(z_2 : obj) => ({def} z_2 
          = .x_1 : prop)], eqev_1, Refl 
       (.x_1)) : that .y_1 = .x_1)]


   Eqsymm : [(.x_1 : obj), (.y_1 
       : obj), (eqev_1 : that 
       .x_1 = .y_1) => (--- : that 
       .y_1 = .x_1)]


   {move 0}

   >>> comment quantifiers, testing \
       another level of implicitness


   {move 1}

   >>> postulate Forall pred : prop


   Forall : [(pred_1 : [(x_2 
          : obj) => (--- : prop)]) => 
       (--- : prop)]


   {move 0}

   >>> declare univev [x => that \
          pred x]


   univev : [(x_1 : obj) => 
       (--- : that pred (x_1))]


   {move 1}

   >>> postulate Ug univev that \
       Forall pred


   Ug : [(.pred_1 : [(x_2 : obj) => 
          (--- : prop)]), (univev_1 
       : [(x_2 : obj) => (--- 
          : that .pred_1 (x_2))]) => 
       (--- : that Forall (.pred_1))]


   {move 0}

   >>> declare univev2 that Forall \
       pred


   univev2 : that Forall (pred)


   {move 1}

   >>> declare w obj


   w : obj


   {move 1}

   >>> postulate Ui univev2 w that \
       pred w


   Ui : [(.pred_1 : [(x_2 : obj) => 
          (--- : prop)]), (univev2_1 
       : that Forall (.pred_1)), (w_1 
       : obj) => (--- : that .pred_1 
       (w_1))]


   {move 0}

   >>> define Fixtype p pp : that \
       p


   Fixtype : [(p_1 : prop), (pp_1 
       : that p_1) => (--- : that 
       p_1)]


   {move 0}

   >>> postulate Ug0 pred univev \
       : that Forall pred


   Ug0 : [(pred_1 : [(x_2 : obj) => 
          (--- : prop)]), (univev_1 
       : [(x_2 : obj) => (--- 
          : that pred_1 (x_2))]) => 
       (--- : that Forall (pred_1))]


   {move 0}

   >>> define test137 : Ug0 [x => \
          x = x] Refl


   test137 : [({def} Ug0 ([(x_2 
          : obj) => ({def} x_2 
          = x_2 : prop)], Refl) : that 
       Forall ([(x_2 : obj) => 
          ({def} x_2 = x_2 : prop)]))]


   test137 : that Forall ([(x_2 
       : obj) => ({def} x_2 
       = x_2 : prop)])


   {move 0}

   >>> define test138 : Ug Refl


   test138 : [({def} Ug (Refl) : that 
       Forall ([(x''_2 : obj) => 
          ({def} x''_2 = x''_2 
          : prop)]))]


   test138 : that Forall ([(x''_2 
       : obj) => ({def} x''_2 
       = x''_2 : prop)])


   {move 0}

   >>> postulate Exists pred prop


   Exists : [(pred_1 : [(x_2 
          : obj) => (--- : prop)]) => 
       (--- : prop)]


   {move 0}

   >>> declare existsev that pred \
       x


   existsev : that pred (x)


   {move 1}

   >>> postulate Ei1 pred existsev \
       that Exists pred


   Ei1 : [(.x_1 : obj), (pred_1 
       : [(x_2 : obj) => (--- 
          : prop)]), (existsev_1 
       : that pred_1 (.x_1)) => 
       (--- : that Exists (pred_1))]


   {move 0}

   >>> postulate Ei2 x existsev \
       that Exists pred


   Ei2 : [(x_1 : obj), (.pred_1 
       : [(x_2 : obj) => (--- 
          : prop)]), (existsev_1 
       : that .pred_1 (x_1)) => 
       (--- : that Exists (.pred_1))]


   {move 0}

   >>> define testing57 x : Ei2 \
       x Refl x


   testing57 : [(x_1 : obj) => 
       ({def} x_1 Ei2 Refl (x_1) : that 
       Exists ([(x''_2 : obj) => 
          ({def} x''_2 = x''_2 
          : prop)]))]


   testing57 : [(x_1 : obj) => 
       (--- : that Exists ([(x''_2 
          : obj) => ({def} x''_2 
          = x''_2 : prop)]))]


   {move 0}
end Lestrade execution





(* quit *)
