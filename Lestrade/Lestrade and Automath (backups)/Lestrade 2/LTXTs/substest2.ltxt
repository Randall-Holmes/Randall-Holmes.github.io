
begin Lestrade execution

   >>> postulate Nat type


   Nat : type


   {move 0}

   >>> declare x in Nat


   x : in Nat


   {move 1}

   >>> declare y in Nat


   y : in Nat


   {move 1}

   >>> postulate + x y in Nat


   + : [(x_1 : in Nat), (y_1 : in Nat) => 
       (--- : in Nat)]


   {move 0}

   >>> declare tau type


   tau : type


   {move 1}

   >>> declare a in tau


   a : in tau


   {move 1}

   >>> declare b in tau


   b : in tau


   {move 1}

   >>> postulate = a b prop


   = : [(.tau_1 : type), (a_1 : in .tau_1), (b_1 
       : in .tau_1) => (--- : prop)]


   {move 0}

   >>> declare c in tau


   c : in tau


   {move 1}

   >>> declare pred [c => prop]


   pred : [(c_1 : in tau) => (--- : prop)]


   {move 1}

   >>> declare eqev that a = b


   eqev : that a = b


   {move 1}

   >>> declare predev that pred a


   predev : that pred (a)


   {move 1}

   >>> postulate Subs eqev predev that pred \
       b


   Subs : [(.tau_1 : type), (.a_1 : in 
       .tau_1), (.b_1 : in .tau_1), (.pred_1 
       : [(c_2 : in .tau_1) => (--- : prop)]), (eqev_1 
       : that .a_1 = .b_1), (predev_1 : that 
       .pred_1 (.a_1)) => (--- : that 
       .pred_1 (.b_1))]


   {move 0}

   >>> declare testev that (x + y) = y + x


   testev : that (x + y) = y + x


   {move 1}

   >>> declare testev2 that ((x + y) + x) = x + y + x


   testev2 : that ((x + y) + x) = x + y + x


   {move 1}

   >>> Subs testev testev2

[({def} testev Subs testev2 : that ((y + x) + x) = x + y + x)]

that ((y + x) + x) = x + y + x


   {move 1}
end Lestrade execution

(* quit *)
