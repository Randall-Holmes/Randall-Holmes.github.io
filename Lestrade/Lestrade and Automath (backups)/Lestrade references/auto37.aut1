
00 A EB prop

%(A:prop)


A  B EB prop

%(A:prop,B:prop)


B Imp [T:A]B prop

%Imp(A:prop,B:prop) = [T:A]B : prop


00 Con PN prop

%Con = PN : prop


A Not Imp(A,Con) prop

%Not(A:prop) = Imp(A,Con) : prop


B I EB Imp(A,B)

%(A:prop,B:prop,I:Imp(A,B))


I N EB Not(B)

%(A:prop,B:prop,I:Imp(A,B),N:Not(B))


N Contrapos [T:A]<<T>I>N  Not(A)

%Contrapos(A:prop,B:prop,I:Imp(A,B),N:Not(B)) = [T:A]<<T>I>N : Not(A)


A A0 EB A

%(A:prop,A0:A)


A0 Th1 [T:Not(A)]<A0>T Not(Not(A))

%Th1(A:prop,A0:A) = [T:Not(A)]<A0>T : Not(Not(A))


A N EB Not(Not(A))

%(A:prop,N:Not(Not(A)))


N Dblneglaw PN A

%Dblneglaw(A:prop,N:Not(Not(A))) = PN : A


B I EB Imp(A,B)

%(A:prop,B:prop,I:Imp(A,B))


I J EB Imp(Not(A),B)

%(A:prop,B:prop,I:Imp(A,B),J:Imp(Not(A),B))


J Anycase Dblneglaw(B,[T:Not(B)]<<Contrapos(A,B,I,T)>J>T)  B

%Anycase(A:prop,B:prop,I:Imp(A,B),J:Imp(Not(A),B)) = Dblneglaw(B,[T:Not(B)]<<Contrapos(A,B,I,T)>J>T) : B


B N EB Not(A)

%(A:prop,B:prop,N:Not(A))


N Th2 [T:A]Dblneglaw(B,[U:Not(B)]<T>N) Imp(A,B)

%Th2(A:prop,B:prop,N:Not(A)) = [T:A]Dblneglaw(B,[U:Not(B)]<T>N) : Imp(A,B)


B A0  EB A

%(A:prop,B:prop,A0:A)


A0 N EB Not(B)

%(A:prop,B:prop,A0:A,N:Not(B))


N Th3 [T:Imp(A,B)]<<A0>T>N  Not(Imp(A,B))

%Th3(A:prop,B:prop,A0:A,N:Not(B)) = [T:Imp(A,B)]<<A0>T>N : Not(Imp(A,B))


B N EB Not(Imp(A,B))

%(A:prop,B:prop,N:Not(Imp(A,B)))


N Th4 Dblneglaw(A,[T:Not(A)]<Th2(A,B,T)>N)  A

%Th4(A:prop,B:prop,N:Not(Imp(A,B))) = Dblneglaw(A,[T:Not(A)]<Th2(A,B,T)>N) : A


N Th5  [T:B]<[U:A]T>N  Not(B)

%Th5(A:prop,B:prop,N:Not(Imp(A,B))) = [T:B]<[U:A]T>N : Not(B)

# begin page 11

B Or Imp(Not(A),B)  prop

%Or(A:prop,B:prop) = Imp(Not(A),B) : prop


B A0 EB A

%(A:prop,B:prop,A0:A)


A0 Ori1 Th2(Not(A),B,Th1(A,A0)) Or(A,B)

%Ori1(A:prop,B:prop,A0:A) = Th2(Not(A),B,Th1(A,A0)) : Or(A,B)


B B0 EB B

%(A:prop,B:prop,B0:B)


B0 Ori2 [T:Not(A)]B0  Or(A,B)

%Ori2(A:prop,B:prop,B0:B) = [T:Not(A)]B0 : Or(A,B)


B O  EB  Or(A,B)

%(A:prop,B:prop,O:Or(A,B))


O N  EB  Not(A)

%(A:prop,B:prop,O:Or(A,B),N:Not(A))


N Notcase1 <N>O  B

%Notcase1(A:prop,B:prop,O:Or(A,B),N:Not(A)) = <N>O : B


O  N  EB  Not(B)

%(A:prop,B:prop,O:Or(A,B),N:Not(B))


N Notcase2 Dblneglaw(A,Contrapos(Not(A),B,O,N))  A

%Notcase2(A:prop,B:prop,O:Or(A,B),N:Not(B)) = Dblneglaw(A,Contrapos(Not(A),B,O,N)) : A


B C  EB  prop

%(A:prop,B:prop,C:prop)


C O EB  Or(A,B)

%(A:prop,B:prop,C:prop,O:Or(A,B))


O I EB  Imp(A,C)

%(A:prop,B:prop,C:prop,O:Or(A,B),I:Imp(A,C))


I J EB  Imp(B,C)

%(A:prop,B:prop,C:prop,O:Or(A,B),I:Imp(A,C),J:Imp(B,C))


J Ore Anycase(A,C,I,[T:Not(A)]<<T>O>J)  C

%Ore(A:prop,B:prop,C:prop,O:Or(A,B),I:Imp(A,C),J:Imp(B,C)) = Anycase(A,C,I,[T:Not(A)]<<T>O>J) : C


B And  Not(Imp(A,Not(B))) prop

%And(A:prop,B:prop) = Not(Imp(A,Not(B))) : prop


B A0  EB  A

%(A:prop,B:prop,A0:A)


A0 B0 EB  B

%(A:prop,B:prop,A0:A,B0:B)


B0 Andi  Th3(A,Not(B),A0,Th1(B,B0))  And(A,B)

%Andi(A:prop,B:prop,A0:A,B0:B) = Th3(A,Not(B),A0,Th1(B,B0)) : And(A,B)


B A1  EB  And(A,B)

%(A:prop,B:prop,A1:And(A,B))


A1 Ande1 Th4(A,Not(B),A1)  A

%Ande1(A:prop,B:prop,A1:And(A,B)) = Th4(A,Not(B),A1) : A


A1 Ande2  Dblneglaw(B,Th5(A,Not(B),A1))  B

%Ande2(A:prop,B:prop,A1:And(A,B)) = Dblneglaw(B,Th5(A,Not(B),A1)) : B

# begin page 12

00 Nat PN type

%Nat = PN : type


00 P EB [X:Nat]prop

%(P:[X:Nat]prop)


P All P prop

%All(P:[X:Nat]prop) = P : prop


P Some Not(All([X:Nat]Not(<X>P))) prop

%Some(P:[X:Nat]prop) = Not(All([X:Nat]Not(<X>P))) : prop


P K EB Nat

%(P:[X:Nat]prop,K:Nat)


K Kp EB <K>P

%(P:[X:Nat]prop,K:Nat,Kp:<K>P)


Kp Somei  [T:[X:Nat]Not(<X>P)]<Kp><K>T  Some(P)

%Somei(P:[X:Nat]prop,K:Nat,Kp:<K>P) = [T:[X:Nat]Not(<X>P)]<Kp><K>T : Some(P)


P  A  EB  prop

%(P:[X:Nat]prop,A:prop)


A S  EB  Some(P)

%(P:[X:Nat]prop,A:prop,S:Some(P))


S A0  EB [X:Nat][T:<X>P]A

%(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A)


A0 N EB Not(A)

%(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A,N:Not(A))


N K EB Nat

%(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A,N:Not(A),K:Nat)


K T1 Contrapos(<K>P,A,<K>A0,N) Not(<K>P)

%T1(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A,N:Not(A),K:Nat) = Contrapos(<K>P,A,<K>A0,N) : Not(<K>P)


N T2 <[X:Nat]T1(X)>S  Con

%T2(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A,N:Not(A)) = <[X:Nat]T1(X)>S : Con


A0 Somee Dblneglaw(A,[T:Not(A)]T2(T)) A

%Somee(P:[X:Nat]prop,A:prop,S:Some(P),A0:[X:Nat][T:<X>P]A) = Dblneglaw(A,[T:Not(A)]T2(T)) : A


00 K EB Nat

%(K:Nat)


K L EB Nat

%(K:Nat,L:Nat)


L Is PN prop

%Is(K:Nat,L:Nat) = PN : prop


K Refleq PN Is(K,K)

%Refleq(K:Nat) = PN : Is(K,K)


L I EB Is(K,L)

%(K:Nat,L:Nat,I:Is(K,L))


I P EB [X:Nat]prop

%(K:Nat,L:Nat,I:Is(K,L),P:[X:Nat]prop)


P Kp EB <K>P

%(K:Nat,L:Nat,I:Is(K,L),P:[X:Nat]prop,Kp:<K>P)


Kp Eqpred1 PN <L>P

%Eqpred1(K:Nat,L:Nat,I:Is(K,L),P:[X:Nat]prop,Kp:<K>P) = PN : <L>P

# there was a problem I had to solve here:  this is where I
# discovered that all construction terms need their argument lists
# expanded before the experimental additional declarations are
# executed.

%Symeq1 = [K:Nat][L:Nat][I:Is(K,L)]Is(L,K) : [K:Nat][L:Nat][I:Is(K,L)]prop

%Symeq2 = [K:Nat][L:Nat][I:Is(K,L)]Eqpred1(K,L,I,[X:Nat]Is(X,K),Refleq(K)) : Symeq1

I Symeq Eqpred1([X:Nat]Is(X,K),Refleq(K)) Is(L,K)

%Symeq(K:Nat,L:Nat,I:Is(K,L)) = Eqpred1([X:Nat]Is(X,K),Refleq(K)) : Is(L,K)

# Symeq1 = [K:Nat][L:Nat][I:Is(K,L)]Is(L,K) : [K:Nat][L:Nat][I:Is(K,L)]prop
# I Symeq Eqpred1(K,L,I,[X:Nat]Is(X,K),Refleq(K)) Is(L,K)

P Lp EB <L>P

%(K:Nat,L:Nat,I:Is(K,L),P:[X:Nat]prop,Lp:<L>P)


Lp Eqpred2 Eqpred1(L,K,Symeq(K,L,I),P,Lp) <K>P

%Eqpred2(K:Nat,L:Nat,I:Is(K,L),P:[X:Nat]prop,Lp:<L>P) = Eqpred1(L,K,Symeq(K,L,I),P,Lp) : <K>P


L M EB Nat

%(K:Nat,L:Nat,M:Nat)


M I EB Is(K,L)

%(K:Nat,L:Nat,M:Nat,I:Is(K,L))


I J  EB Is(L,M)

%(K:Nat,L:Nat,M:Nat,I:Is(K,L),J:Is(L,M))


%Treq1 = [K:Nat][L:Nat][M:Nat][I:Is(K,L)][J:Is(L,M)]Is(K,M) : [K:Nat][L:Nat][M:Nat][I:Is(K,L)][J:Is(L,M)]prop

%Treq2 = [K:Nat][L:Nat][M:Nat][I:Is(K,L)][J:Is(L,M)]Eqpred1(L,M,J,[X:Nat]Is(K,X),I) : Treq1

J Treq Eqpred1(L,M,J,[X:Nat]Is(K,X),I) Is(K,M)

%Treq(K:Nat,L:Nat,M:Nat,I:Is(K,L),J:Is(L,M)) = Eqpred1(L,M,J,[X:Nat]Is(K,X),I) : Is(K,M)


M I EB Is(K,M)

%(K:Nat,L:Nat,M:Nat,I:Is(K,M))


I J EB Is(L,M)

%(K:Nat,L:Nat,M:Nat,I:Is(K,M),J:Is(L,M))


%Conveq1 = [K:Nat][L:Nat][M:Nat][I:Is(K,M)][J:Is(L,M)]Is(K,L) : [K:Nat][L:Nat][M:Nat][I:Is(K,M)][J:Is(L,M)]prop

%Conveq2 = [K:Nat][L:Nat][M:Nat][I:Is(K,M)][J:Is(L,M)]Treq(K,M,L,I,Symeq(L,M,J)) : Conveq1

J Conveq Treq(K,M,L,I,Symeq(L,M,J))  Is(K,L)

%Conveq(K:Nat,L:Nat,M:Nat,I:Is(K,M),J:Is(L,M)) = Treq(K,M,L,I,Symeq(L,M,J)) : Is(K,L)


M N EB Nat

%(K:Nat,L:Nat,M:Nat,N:Nat)


N I EB Is(K,L)

%(K:Nat,L:Nat,M:Nat,N:Nat,I:Is(K,L))


I J EB Is(L,M)

%(K:Nat,L:Nat,M:Nat,N:Nat,I:Is(K,L),J:Is(L,M))


J I0 EB Is(M,N)

%(K:Nat,L:Nat,M:Nat,N:Nat,I:Is(K,L),J:Is(L,M),I0:Is(M,N))


%Treq4 = [K:Nat][L:Nat][M:Nat][N:Nat][I:Is(K,L)][J:Is(L,M)][I0:Is(M,N)]Is(K,N) : [K:Nat][L:Nat][M:Nat][N:Nat][I:Is(K,L)][J:Is(L,M)][I0:Is(M,N)]prop

%Treq5 = [K:Nat][L:Nat][M:Nat][N:Nat][I:Is(K,L)][J:Is(L,M)][I0:Is(M,N)]Treq(K,M,N,Treq(K,L,M,I,J),I0) : Treq4

I0 Treq3 Treq(K,M,N,Treq(K,L,M,I,J),I0) Is(K,N)

%Treq3(K:Nat,L:Nat,M:Nat,N:Nat,I:Is(K,L),J:Is(L,M),I0:Is(M,N)) = Treq(K,M,N,Treq(K,L,M,I,J),I0) : Is(K,N)

# begin page 13
quit
