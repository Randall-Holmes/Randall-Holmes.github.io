\chapter[Operations on Functions]{Operations on Functions and\\
Families of Sets}\index{function}

\section{Operations on Functions}

The basic operations on functions are analogous to those on
relations\index{relation}.  

\begin{definition}
  If $f$ and $g$ are functions\index{function}, we define the {\upshape
  composition\index{composition}\/} of $f$ and $g$, denoted by 
  $(f \circ g)$ or $fg$, as $g|f$, the relative product\index{relative product}
  of $g$ and $f$. 
\end{definition}

The change in order is motivated by the fact that $(f \circ g)(x) =
f(g(x))$ (when rng$(g)\subseteq $ dom$(f)$).  There are mathematicians
who feel that it is more natural to put the function\index{function} name after
the argument, writing $(x)f$ instead of $f(x)$; these will write $g|f$ as
$gf$ as well.  In some sense, the order of the relative product\index{relative
product} is more natural than the order of composition, because our feeling
about $f(g(x))$ is that we use $g$ to transform $x$ to $g(x)$, {\itshape
then\/}
use $f$ to transform $g(x)$ to $f(g(x))$.  There is another minority
opinion among mathematicians that we ought to define a function $f$ as
$\{(y,x)\st y=f(x)\}$; holders of this view have no trouble with the
notation for composition.

The converse\index{converse (of a relation)} $f^{-1}$ of a
function\index{function} is not usually a function.  If $f^{-1}$ is a function
(i.e., if $f$ is one-to-one\index{one-to-one map}), then it is called the
{\itshape inverse\index{inverse function|textbf}\/} of $f$.  The relation of
inverse functions to composition deserves to be noted:
\begin{displaymath}
 (f \circ g)^{-1} = (g^{-1} \circ f^{-1}).
\end{displaymath}
 
We observe that the operation of taking inverse images\index{inverse image}
``commutes with Boolean\index{Boolean algebra, operations} operations":
\begin{displaymath}
 \begin{array}{l}
  f^{-1}[A^c] = \dom(f) - f^{-1}[A]\qquad\mbox{(complement\index{complement}
   relative to $\dom(f)$)};\\[1mm]
  f^{-1}[A \cup B] = f^{-1}[A] \cup f^{-1}[B].
 \end{array}
\end{displaymath}

One might think that the ``image" under $f$, a more natural
notion on the surface, would have nicer behaviour, but this is not the
case.  We give some typical results:
\begin{displaymath}
 \begin{array}{l}
  f[A \cup B] = f[A] \cup f[B];\\[1mm]
  f[A \cap B] \subseteq f[A] \cap f[B]\qquad\mbox{(equality does not
       hold)};\\[1mm]
  \rng(f) - f(A) \subseteq f[A^c];
\end{array}
\end{displaymath}
and indicate the relation between image and inverse image\index{inverse image}
(they are not inverse operations!):
\begin{displaymath}
 \begin{array}{l}
  f[f^{-1}[A]] = A;\\[1mm]
  f^{-1}[f[A]] \supseteq A.
 \end{array}
\end{displaymath}




\section{Operations on Families of Sets}

We now turn our attention to some operations in families of
sets.  One of these, the operation of set union\index{union!set}, we have
already introduced.  We will use the set union $\bigcup[A]$ to illustrate the
connection with functions\index{function}.

There is a tendency to consider a family\index{indexed family of sets} of sets
$A$ via a function\index{function!used for indexing} $F$ from an index set $I$
to the set $A$; such a function $F$ is 
called an ``indexed collection" representing the family $A = \rng(F)$ via
the ``index set" $I = \dom(F)$.  $F(i)$ is often written $a_{i}$, leaving the
function $F$ anonymous; operations on indexed collections, like the
Cartesian product\index{Cartesian product} $\prod [F]$ which we define below,
would be written $\prod_{i \in I}[a_{i}]$ in this style, or simply $\prod
[a_{i}]$.  In certain cases, the presence of the index set $I$ and the
anonymous function\index{function} from $I$ to $A$ is
simply redundant; one context in which it does make sense is when the
operations on families of sets are being considered as infinite
analogues of binary operations; the index formalism makes it possible
to formalize infinitary analogues of the commutative, associative,
distributive, and other algebraic laws, because they give the
``infinite algebraic expressions" more structure.  Another case is
where duplications of objects in the family $A$ have an effect on the
result of the operation.  We will suppress the use of indexed
collections where we can; for example, we do not define set
union\index{union!set} or intersection\index{intersection!set} for indexed
collections.

It is worth noting a relationship between the power set\index{power set}
operation and the set union operation:

\begin{displaymath}
 \bigcup[{\cal P}\{A\}] = A;\qquad
 {\cal P}\{\bigcup[A]\} \supseteq A.
\end{displaymath}

We now formally introduce the operation of set intersection.

\begin{thm}
 $\bigcap[A]$ = $\{x \st$ for all $B$, if $B \in A,$
 then $ x \in B\}$, called the
 {\upshape intersection\index{intersection!set, definition
 of}\index{intersection!set|textbf} of the set of sets $A$}, exists.
\end{thm}

\preuve Use the Stratified Comprehension\index{Stratified Comprehension
Theorem} Theorem.
\finpreuve

$\bigcap [A]$ is the complement\index{complement} of the union\index{union!set}
of the set of complements of elements of $A$, a fact analogous to the
relationship between binary intersection and union.  

An observation worth making is that the operation of taking
inverse images\index{inverse image} under a function\index{function} ``commutes
with" set intersection\index{intersection!Boolean} and set union just as it
does with the Boolean\index{Boolean algebra, operations} operations.


Like set intersection, the next operation we introduce extends
a binary operation we have already defined for sets.

\begin{thm}
 Let $F$ be a function\index{function} whose range is $A$.  $\prod[F]$ = $\{f
 \st f$ is a function from $\dom(F)$ to ${\cal P}_1\{\bigcup[A]\}$ (the set of
 singletons\index{singleton} of elements of elements of $A$) such that for each
 $i \in \dom(F)$, $f(i) \subseteq F(i)\}$, called the {\upshape
 Cartesian\index{Cartesian product!indexed, defined} 
 product} of $F$, exists.  We may use $\prod[A]$ to abbreviate
 $\prod[[=] \lceil A]$; we signal this by saying that we use $A$ to
 index itself.
\end{thm}

\preuve\ Use the Stratified Comprehension\index{Stratified Comprehension
Theorem} Theorem (the application of stratified comprehension in this theorem
is fully analyzed in the next section).  The use of functions\index{function} 
from elements of $A$ to singletons\index{singleton} of elements of
elements of $A$, rather than to the elements of the elements of $A$
themselves, is dictated by stratification\index{stratification}
requirements.  Note that the functions which are elements of
$\prod[A]$ each encode the choice\index{axiom of choice} of one
element from each element of $A$.
\finpreuve

The analogy between the Cartesian\index{Cartesian product} product of a family
of sets and the Cartesian product of a pair of sets is not as close as the
analogies in the cases of set vs. Boolean\index{Boolean algebra, operations}
intersection and union\index{union!Boolean}.
Since the presence of duplicate sets in a Cartesian product makes a
difference, we must use the function\index{function} $F$, whose
domain\index{domain} is an ``index set"
(the use of an index set here can be used to see how an index set
would be used in the cases of set union\index{union!set} and intersection).
The elements of the Cartesian product\index{Cartesian product} of a set are not
$n$-tuples (this would not be feasible if the size of $A$ were not any finite
$n$!), but functions with domain dom$(F)$.  There is a
type-differential\index{types (relative)} between 
the elements of a set Cartesian product and the elements of the sets
in the product, which is not the case in the binary Cartesian product.
The Cartesian product of a two-element set is formally related to the
Cartesian product of the two sets, but it is not the same object
($\prod[\{A,B\}]$ has the function\index{function} which sends $A$ to $\{a\}$
and $B$ to $\{b\}$ in place of each $(a,b)$ in $A \times B$).

The use of any of these operations involves attention to type\index{types
(relative)} differentials: the types of $\bigcup[A]$ and $\bigcap [A]$ are one
lower than the type of $A$, while the type of $\prod[F]$ is one higher than the
type of $F$ (similarly for $\prod[A]$).  This means that $(A \mapsto
\prod[A])$, for example, is not a function\index{function}; this is also the
case for the other two operations.  A function which does exist is the
operation $(A \mapsto  {\cal P}\{\bigcup[A]\})$ alluded to in passing above;
the type-raising\index{type-raising operation} effect of power-set\index{power
set} and the type-lowering\index{type-lowering operation} effect of set
union\index{union!set} cancel out.

Finally, we observe that the apparently obvious assertion that
the Cartesian product\index{Cartesian product!related to the axiom of choice}
of any collection of non-empty sets is non-empty is precisely equivalent to the
Axiom of Choice\index{axiom of choice}.  The proof will motivate the
introduction of a new binary operation on sets and the corresponding operation
on families of sets.

The Axiom of Choice allows us to select an element from each
compartment of a partition\index{partition} of any set.  This is precisely what
is needed to construct an element of $\prod[A]$ if $A$ is a pairwise
disjoint\index{disjoint} collection of sets.  The trick needed for the proof of
the general result is a device for constructing a disjoint\index{disjoint}
family of sets from a family of sets which is not disjoint.  This is the
set-theoretical operation of forming ``disjoint sums".

\begin{definition}
 If $A$ and $B$ are sets, the {\upshape disjoint\index{disjoint!disjoint sum,
 definition of} sum} of $A$ and $B$, written $A \oplus B$, is the set $\{(x,y)
 \st (x \in A$ and $y = 0)$ or $(x \in B$ and $y = 1)\}$.
\end{definition}

This is a binary operation, so not immediately useful to us.
Note that the types\index{types (relative)} of $A$, $B$, and $A \oplus B$ in a
stratified\index{stratification} sentence will all be the same.  The
corresponding operation on families of sets is less straightforward (it
requires ``indexing").

\begin{definition}
 If $F$ is a function\index{function}, $\sum[F]$, the {\upshape disjoint
 sum\index{disjoint!disjoint sum, indexed, definition of}\/} of $F$, is the 
 set $\{(\{b\},i) \st b \in F(i)$ and $i \in \dom(F)\}$.  We may use
 $\sum[ A]$ to abbreviate $\sum[ [=] \lceil A]$, the sum of the
 identity function on $A$; we say then that we use $A$ to index itself.
\end{definition}

Notice that the elements of $\sum[ F]$ are not ``labelled" elements
of elements of rng$(F)$, but ``labelled" singletons\index{singleton} of
elements of elements of $\rng(F)$; this is needed to satisfy
stratification\index{stratification} requirements.  $\sum[ F]$ is actually of
the same type\index{types (relative)} as $F$, unusually.
$\sum[ F]$ is naturally partitioned\index{partition} into the pairwise
disjoint\index{disjoint} sets $\{(\{b\},i)
\st b \in F(i)\}$ for each $i$ in $\dom(F)$.  As with the
Cartesian\index{Cartesian product} product, the
disjoint\index{disjoint!disjoint sum} sum of a one-to-one\index{one-to-one map}
function\index{function} whose range has two elements is not the same as the
disjoint sum of the two elements of that range,
although they are closely related.

We are now ready to prove the promised

\begin{thm}
 The Axiom of Choice is equivalent to the assertion that all Cartesian products
 of indexed collections of nonempty sets are non-\linebreak empty.
\end{thm}

\preuve\ We indicate how to use the Axiom of Choice\index{axiom of
choice} to construct an element of the Cartesian\index{Cartesian
product!related to the axiom of choice} product of any ``indexed
collection" $F$ of non-empty sets.  Observe that the disjoint
sum\index{disjoint!disjoint sum} $\sum[ F]$ can be partitioned in a
natural way into the collections ${\cal P}_1\{F(i)\} \times \{i\}$ for
each $i$ in dom$(F)$.  We use the Axiom of Choice to construct a
choice set for this partition; this will be a set with a single
element $(\{b\},i)$ such that $b \in F(i)$ for each $i$ in $\dom(F)$.
This set is a relation, whose converse will be a function taking each
element of dom$(F)$ to the singleton of an element of $F(i)$, which
will be an element of $\prod[F]$ by the definition of that set.

Given a collection $P$ of pairwise disjoint nonempty sets, take
$\prod[[=]\lceil P]$ (the self-indexed product of the collection $P$,
which we might write $\prod[P]$ if we were being slightly less
formal); given that $\prod[[=] \lceil P]$ is nonempty, we can
construct a choice set for $P$ as the union of the range of an element
of the self-indexed Cartesian product of $P$.  This completes the
proof.
\finpreuve



\section{A Case Study in Stratification}

In this section, we will analyze one of the constructions of the last
section with an eye to justifying assertions about relative type\index{types
(relative)} and stratification\index{stratification!extended example}, and with
an eye to giving a reader a model of how to go about supplying such
justifications himself for later
assertions of this sort which are not given explicit support.

Our example will be the definition of the Cartesian
product\index{Cartesian product} of a collection of sets ``indexed''
by a function $F$.  We reproduce the relevant theorem from above:

\begin{thm}
 Let $F$ be a function\index{function} whose range is $A$.  $\prod[F] = \{f \st
 f$ is a function from $\dom(F)$ to ${\cal P}_1\{\bigcup[A]\}$ (the set of 
 singletons\index{singleton} of elements of elements of $A$) such that for each
 $i \in \dom(F)$, $f(i) \subseteq F(i)\}$, called the {\upshape
 Cartesian\index{Cartesian product!indexed, defined} product} of $F$, exists.
 We may use $\prod[A]$ to abbreviate $\prod[[=] \lceil A]$; we signal this by
 saying that we use $A$ to index itself.
\end{thm}

We want $\prod[F]$ to contain elements representing each way to
choose an element from each element of the range of the function
$F$.  We need to assign ``roles'' or relative types to all objects
involved in this construction.

Observe that each element of the range $A$ of the function $F$ is
supposed to be a set, since we need to choose an element from each of
them.  These elements appear to be the objects of lowest type in the
construction, so we assign these relative type 0 (we think of these as
``bare objects'').  This implies that each element $B$ of the range
$A$ of $F$ should be assigned relative type 1 (we think of these as
``classes of bare objects'').  $F$ itself is a collection of ordered
pairs of the form $(i,B)$, where $i$ is an element of some index set
$I$ (the domain of $F$), and $B$ is a set belonging to $A$, the range
of $F$.  The set $B$ has already been assigned relative type 1.  An
ordered pair will have the same relative type as each of its elements,
so we see that we must assign $(i,A)$ and the index $i$ relative type
1 as well.  This means that $F$ (as a class containing $(i,A)$), the
index set $I$ (as a class containing $i$) and the range $A$ of $F$ (as
a class containing $B$) must be assigned relative type 2 (we think of
$I$ and $A$ as ``classes of classes of bare objects''; $F$ is a
``class of pairs of classes of bare objects'', and we assign the same
role to pairs of classes that we assign to classes).  We have
completed the assignment of roles or relative types to objects that we
are given before the construction starts.

An element of the product we are constructing is supposed to associate
each element $i$ of the index set $I$ with an element $x$ of the set
$A = F(i)$.  Naively, we would like to make this element a function
$f$ with elements of the form $(i,x)$.  But this is forbidden by
considerations of relative type: we have already seen that we must
assign relative type 1 to each index $i \in I$ and relative type 0 to
each element $x$ of an element $B$ of the range $A$ of $F$.  The
standard solution to this difficulty is to recall that we can
associate the singleton $\{x\}$ of relative type 1 with the object $x$
of relative type 0.  We revise our intentions accordingly, using the
pair $(i,\{x\})$ to code the choice of the element $x$ from the set
$F(i)$.  A function $f$ belonging to the product to be constructed
will be a set of pairs $(i,\{x\})$ for $i \in I$ and $x \in F(i)$.
Note that such functions $f$ will be assigned relative type 2 in this
definition, since it is a collection of pairs $(i,\{x\})$ which must
be assigned the same relative type 1 as their projections $i$ and
$\{x\}$.  Moreover, such functions will have domain $I = \dom(F)$ as
stated in the Theorem.  Each element $x$ belongs to the union of the
range $A$ of $F$, so each singleton $\{x\}$ belongs to ${\cal
P}_1\{\bigcup[A]\}$, as stated in the theorem: the need to use the
${\cal P}_1$ construction reflects the underlying need to use the
singleton construction.  This justifies the assertion in the theorem
that each function $f$ belonging to the product will be a function
from $\dom(F)$ to ${\cal P}_1\{\bigcup[A]\}$; we further select as
elements of $\prod[F]$ only those pairs $(i,\{x\}) = (i,f(i))$ such
that $x \in F(i)$, or, equivalently, $\{x\} = f(i) \subseteq F(i)$.
We have now motivated the form of the definition of $\prod[F]$ in
terms of considerations of stratification.  Since we can see that the
definition of $\prod[F]$ is stratified, we see that $\prod[F]$ exists
(the need to verify this is the reason that the ``definition'' of
$\prod[F]$ is actually a theorem).

Further, we see that $\prod[F]$ must be assigned relative type~3,
since its elements $f$ are assigned relative type~2.  The parameter
$F$ in the definition of $\prod[F]$ was assigned relative type~2 in
our analysis, so we see that the type of $\prod[F]$ in any
construction will be $3-2 = 1$ type higher than the type of its
parameter.  It is important to recall that our initial assignment of
type 0 to the elements of the elements of the range of $F$ was
arbitrary; in the context of a larger construction, we might have
assigned a different relative type to these elements, with the effect
of displacing all other types in the construction by a uniform
amount.  This would leave invariant the fact that the relative type of
$\prod[F]$ must be one higher than that of $F$, which is the only fact
we need to recall for the use of the product construction in further
constructions of sets.


\section{Parentheses, Braces, and Brackets}\label{sec-par}

This is a natural point at which to explain certain conventions that
we have followed so far.  We have the notation $f(x)$ for the result
of applying a function\index{function} $f$ to an argument $x$.  The
observant reader may have noticed that some of the operations we have
defined above, such as the domain\index{domain} dom$(x)$ have had the
same format, while others, such as the power set\index{power set}
${\cal P}\{x\}$ or the set union\index{union!set} $\bigcup[X]$ use
different delimiters for their arguments.  We do attempt to follow a
consistent convention: functions and those operators which can be
realized as functions\index{function} (the domain operation, for
example, is actually a function) use parentheses.  Operations which
raise relative type\index{types (relative)} (usually, but not always,
by one) usually use braces, as in ${\cal P}\{x\}$.  The fact that the
braces resemble the braces in the singleton\index{singleton} $\{x\}$
is not accidental; an operation on $x$ which raises type by one {\itshape
can\/} be understood as the application of a function to $\{x\}$!
Other operations (those which lower type or those which abuse it in
worse ways) use brackets as delimiters. An exception is that negative
``powers'' of type-raising\index{type-raising operation} operations,
though they in fact lower type, seem naturally to call for braces.
The use of brackets in the image operation should be distinguishable
from the last use in principle: the difference between $f[X]$ (the
image of the set $X$ under the function\index{function} $f$) and
$\bigcup[X]$ (the set union of $X$) is that the symbol on the left is
the name of a set in one case and a special operator in the other.
Brackets may also be used for images of sets under
type-raising\index{type-raising operation} operations.  A uniform
exception is that all of the ``operations on families of sets''
introduced in this chapter take brackets, although some {\itshape could\/}
take parentheses or braces.  None of these uses should conflict with
the special use of brackets to convert infix operators to set names as
in $[=]$, with the notation $[X \rightarrow Y]$, or with the notation
for equivalence classes\index{equivalence relations, equivalence
classes}.






\Exercises

\begin{enumerate}
\item  Explain the precondition  $\rng(g) \subseteq  \dom(f)$ on the identity
  $(f \circ g)(x) = f(g(x))$.

\item Prove the correctness of our assertions about the relationships between
  the inverse image\index{inverse image} and image operations and the
  Boolean\index{Boolean algebra, operations} operations.

\item  Verify our assertions about the stratification\index{stratification} and
  relative type\index{types (relative)} of the disjoint sum\index{disjoint sum}
  of an indexed family of sets.
\end{enumerate}
