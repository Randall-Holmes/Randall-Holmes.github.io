Do the exercises I have set up.  The commands you are using are the same as in the first lab, except you have the
SU command:  for example SU x$3 := y_1 will replace x$3 with x_1 throughout the proof.  This command supports the
substitutions in the rules UI and EI, and allows them to be delayed until it is clear what should be substituted.

You can also use the d (done) command to cash out variables like x$3 if you are brave:  the system will make
all substitutions for dollar sign variables needed to make the first premise the same as the conclusion, if it legally
can.

A variable x$n cannot be replaced with a variable x_m or x$m (or a complex term involving these variables) if m>=n.

In these exercises, it is advantageous to think about what the statements mean when thinking about
which premises to work with.

The de Morgan laws for quantifiers

s ~(Ax:Px) == (Ex:~Px)

s ~(Ex:Px) == (Ax : ~Px)

Some obvious logical principles

s (Ax:Px -> Qx) & (Ax:Qx -> Tx) -> (Ax:Px -> Tx)

s p? -> (Ax:Px) == (Ax:p? -> Px)

This is the one I did in class
This one says something about the relationship between symmetry, transitivity,
and reflexivity of relations.

s (Ax:Ey:x R y) & (Ax:Ay:x R y -> y R x) & (Ax:Ay:Az:x R y & y R z -> x Rz) -> (Ax:x R x)

Here is a simple fact about the definition of symmetry
(it can be defined with implication as well as with the
biconditional)

s (Ax:Ay:x R y -> y Rx) == (Ax:Ay:x R y == y R x)

Here is one from the book I have been using for examples.  I carried it out, it works.

s (Ax:Xx -> (Ey:Yy & Px)) & (Ax:Yx -> ~g?) & (Ex:Xx) -> ~g?



